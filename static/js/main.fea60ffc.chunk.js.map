{"version":3,"sources":["assets/images/logo.png","modules/usedapp2/constants/abi/index.ts","modules/usedapp2/model/chain/local.ts","modules/usedapp2/model/chain/arbitrum.ts","modules/usedapp2/model/chain/avalanche.ts","modules/usedapp2/model/chain/bsc.ts","modules/usedapp2/model/chain/cronos.ts","modules/usedapp2/model/chain/fantom.ts","modules/usedapp2/model/chain/harmony.ts","modules/usedapp2/model/chain/ethereum.ts","modules/usedapp2/model/chain/metis.ts","modules/usedapp2/model/chain/moonbeam.ts","modules/usedapp2/model/chain/moonriver.ts","modules/usedapp2/model/chain/oasis.ts","modules/usedapp2/model/chain/palm.ts","modules/usedapp2/model/chain/polygon.ts","modules/usedapp2/model/chain/songbird.ts","modules/usedapp2/model/chain/theta.ts","modules/usedapp2/model/chain/thundercore.ts","modules/usedapp2/model/chain/xdai.ts","modules/usedapp2/model/chain/optimism.ts","modules/usedapp2/model/chain/aurora.ts","modules/usedapp2/model/chain/velas.ts","modules/usedapp2/model/formatting.ts","modules/usedapp2/model/Currency.ts","modules/usedapp2/model/CurrencyValue.ts","modules/usedapp2/model/TransactionStatus.ts","modules/usedapp2/constants/chainId.ts","modules/usedapp2/constants/currencies.ts","modules/usedapp2/model/config/default.ts","modules/usedapp2/helpers/chain.ts","modules/usedapp2/providers/config/context.ts","modules/usedapp2/providers/config/reducer.ts","modules/usedapp2/providers/config/provider.tsx","modules/usedapp2/providers/blockNumber/blockNumber/context.ts","modules/usedapp2/providers/blockNumber/common/reducer.ts","modules/usedapp2/providers/blockNumber/common/subscribeToNewBlock.ts","modules/usedapp2/providers/blockNumber/blockNumber/provider.tsx","modules/usedapp2/providers/chainState/multiChainStates/context.ts","modules/usedapp2/helpers/calls.ts","modules/usedapp2/helpers/common.ts","modules/usedapp2/helpers/address.ts","modules/usedapp2/helpers/transaction.ts","modules/usedapp2/helpers/getChainMeta.ts","modules/usedapp2/helpers/injectedProvider.ts","modules/usedapp2/helpers/eip1193.ts","modules/usedapp2/providers/network/network/context.ts","modules/usedapp2/providers/network/network/reducer.ts","modules/usedapp2/providers/network/network/provider.tsx","modules/usedapp2/providers/network/readonlyNetworks/context.ts","modules/usedapp2/helpers/fromEntries.ts","modules/usedapp2/providers/network/readonlyNetworks/provider.tsx","modules/usedapp2/providers/blockNumber/blockNumbers/context.ts","modules/usedapp2/providers/devtools.ts","modules/usedapp2/providers/blockNumber/blockNumbers/provider.tsx","modules/usedapp2/providers/chainState/common/callsReducer.ts","modules/usedapp2/providers/chainState/common/chainStateReducer.ts","modules/usedapp2/providers/chainState/common/multicall.ts","modules/usedapp2/providers/chainState/common/multicall2.ts","modules/usedapp2/hooks/useChainId.ts","modules/usedapp2/providers/chainState/multiChainStates/provider.tsx","modules/usedapp2/providers/chainState/common/performMulticall.ts","modules/usedapp2/providers/chainState/common/useDevtoolsReporting.ts","modules/usedapp2/providers/notifications/model.ts","modules/usedapp2/providers/notifications/context.ts","modules/usedapp2/providers/notifications/reducer.ts","modules/usedapp2/providers/notifications/provider.tsx","modules/usedapp2/providers/transactions/model.ts","modules/usedapp2/providers/LocalMulticallProvider.tsx","modules/usedapp2/providers/transactions/context.ts","modules/usedapp2/providers/transactions/reducer.ts","modules/usedapp2/providers/transactions/provider.tsx","modules/usedapp2/helpers/contract.ts","modules/usedapp2/providers/DAppProvider.tsx","modules/usedapp2/hooks/useChainState.ts","modules/usedapp2/hooks/useMulticallAddress.ts","modules/usedapp2/hooks/useRawCalls.ts","modules/usedapp2/hooks/useBlockMeta.ts","modules/usedapp2/hooks/useChainCalls.ts","modules/usedapp2/hooks/useDebounce.ts","modules/usedapp2/hooks/useDebouncePair.ts","modules/usedapp2/helpers/validateArgument.ts","modules/usedapp2/hooks/useReadonlyProvider.tsx","modules/usedapp2/hooks/useEthers.ts","modules/usedapp2/hooks/useCall.ts","modules/usedapp2/hooks/useContractCall.ts","modules/usedapp2/hooks/usePromiseTransaction.ts","modules/usedapp2/hooks/useContractFunction.ts","modules/usedapp2/hooks/useEtherBalance.ts","modules/usedapp2/hooks/useToken.ts","modules/usedapp2/hooks/useTokenBalance.ts","modules/usedapp2/hooks/useTokenAllowance.ts","modules/usedapp2/hooks/useLocalStorage.ts","modules/usedapp2/hooks/useTransactions.ts","modules/usedapp2/hooks/useInterval.tsx","modules/usedapp2/hooks/useNotifications.ts","modules/usedapp2/hooks/useSendTransaction.ts","modules/usedapp2/hooks/useGasPrice.ts","modules/usedapp2/hooks/useLookupAddress.ts","modules/usedapp2/hooks/useTokenList.ts","modules/usedapp2/hooks/useChainMeta.ts","abi/nftFunctions.tsx","components/home/MintButton.tsx","components/home/BlockMintNFT.tsx","components/MetadataBox.tsx","components/NftModal.tsx","components/GenerateCard.tsx","components/AccountModal/AccountModalCard.tsx","components/PaginationComponent.tsx","components/home/BlockRecentMints.tsx","pages/Home.tsx","pages/AdminNFT.tsx","App.tsx","components/AccountModal/Identicon.tsx","components/AccountModal/ConnectButton.tsx","components/AccountModal/AccountModalPagination.tsx","components/AccountModal/AccountModalCollection.tsx","components/AccountModal/AccountModal.tsx","components/Header.tsx","components/Footer.tsx","index.tsx"],"names":["MultiCallABI","Interface","MultiCall","abi","MultiCall2ABI","MultiCall2","ERC20Interface","ERC20","ERC20MockInterface","ERC20Mock","Localhost","chainId","chainName","isTestChain","isLocalChain","multicallAddress","getExplorerAddressLink","getExplorerTransactionLink","Hardhat","ArbitrumRinkeby","address","transactionHash","Arbitrum","multicall2Address","Avalanche","AvalancheTestnet","BSC","BSCTestnet","Cronos","CronosTestnet","Fantom","FantomTestnet","Harmony","Mainnet","Ropsten","Rinkeby","Goerli","Kovan","Stardust","Andromeda","Moonbeam","Moonriver","MoonbaseAlpha","OasisEmerald","OasisEmeraldTestnet","Palm","PalmTestnet","Polygon","Mumbai","Songbird","Theta","ThetaTestnet","ThunderCore","ThunderCoreTestnet","xDai","Gnosis","OptimismKovan","Optimism","Aurora","AuroraTestnet","Velas","VelasTestnet","DEFAULT_OPTIONS","decimals","thousandSeparator","decimalSeparator","significantDigits","Infinity","useFixedPrecision","fixedPrecisionDigits","prefix","suffix","INPUT_REGEX","formatCurrency","options","value","test","TypeError","number","integer","length","replace","stripFrontZeroes","substring","getIntegerPart","thousands","separator","count","resultValue","split","i","splice","join","splitThousands","decimal","padStart","getDecimalPart","digits","padEnd","toFixed","integerLength","stripEndZeroes","toSignificant","joinDecimals","formatNumber","Currency","name","ticker","formattingOptions","this","overrideOptions","FiatCurrency","NativeCurrency","Token","CurrencyValue","currency","toString","format","other","fn","checkCurrency","map","x","add","sub","mul","div","mod","eq","lt","lte","gt","gte","isZero","BigNumber","from","transactionErrored","transaction","ChainId","DEFAULT_SUPPORTED_CHAINS","Ether","Dai","KovanEther","KovanDai","BNB","BUSD","TestBNB","TestBUSD","NATIVE_CURRENCY","DEFAULT_CONFIG","pollingInterval","supportedChains","undefined","networks","notifications","checkInterval","expirationPeriod","localStorage","transactionPath","autoConnect","multicallVersion","getChainById","find","network","deprecationWarning","methodName","console","warn","getChainName","ConfigContext","createContext","config","updateConfig","validConfigs","configs","useConfig","useContext","useUpdateConfig","configReducer","state","action","merge","noUndefined","ConfigProvider","children","configWithDefaults","pickBy","useReducer","reducedConfig","dispatch","Provider","BlockNumberContext","useBlockNumber","blockNumberReducer","current","blockNumber","subscribeToNewBlock","provider","update","on","getBlockNumber","then","err","error","off","BlockNumberProvider","useEthers","library","useEffect","debouncedState","useDebounce","MultiChainStatesContext","chains","dispatchCalls","useMultiChainStates","warnOnInvalidCall","call","contract","method","args","encodeCallData","isStatic","data","interface","encodeFunctionData","getUniqueActiveCalls","requests","unique","used","request","isDisabled","toLowerCase","push","decodeCallResult","result","success","decodeFunctionResult","errorMessage","utils","decodeFunctionData","Error","shortenString","str","shortenAddress","getAddress","shortenIfAddress","compareAddress","firstAddress","secondAddress","parsedFirstAddress","parsedSecondAddress","addressEqual","shortenTransactionHash","shortenIfTransactionHash","getChainMeta","chain","Object","values","getInjectedProvider","a","detectEthereumProvider","injectedProvider","Web3Provider","subscribeToProviderEvents","onUpdate","onDisconnect","onConnectListener","info","Number","onDisconnectListener","onChainChangedListener","onAccountsChangedListener","accounts","removeListener","NetworkContext","errors","reportError","activate","deactivate","activateBrowserWallet","isLoading","useNetwork","defaultNetworkState","networksReducer","prevState","actions","type","tryToGetAccount","getSigner","code","NetworkProvider","providerOverride","useState","onUnsubscribe","setOnUnsubscribe","useLocalStorage","shouldConnectMetamask","setShouldConnectMetamask","setLoading","useCallback","send","newNetwork","setTimeout","window","ethereum","_state","wrappedProvider","isProvider","account","getNetwork","clearSubscriptions","ReadonlyNetworksContext","useReadonlyNetworks","fromEntries","entries","getProviderFromConfig","urlOrProviderOrProviderFunction","JsonRpcProvider","getProvidersFromConfig","readOnlyUrls","ReadonlyNetworksProvider","providerOverrides","providers","setProviders","flat","hook","BlockNumbersContext","useBlockNumbers","BlockNumbersProvider","onUnmount","forEach","notifyDevtools","notification","init","message","callsReducer","calls","finalState","index","findIndex","filter","_","chainStateReducer","newState","oldState","__USEDAPP_DEVTOOLS_HOOK__","ABI","multicall","Contract","aggregate","blockTag","results","stateForAddress","multicall2","tryAggregate","useChainId","opts","readOnlyChainId","queryParams","MultiChainStateProvider","multicallAddresses","blockNumbers","dispatchState","multicall1","useDebouncePair","debouncedCalls","debouncedNetworks","uniqueCalls","useMemo","uniqueCallsJSON","JSON","stringify","multicallForChain","callsOnThisChain","multicallExecutor","start","Date","now","duration","catch","performMulticall","useDevtoolsReporting","_chainId","keys","composeChainState","provided","DEFAULT_NOTIFICATIONS","NotificationsContext","addNotification","removeNotification","useNotificationsContext","notificationReducer","chainState","id","notificationId","NotificationsProvider","nanoid","submittedAt","getStoredTransactionState","receipt","status","LocalMulticallState","DEFAULT_STORED_TRANSACTIONS","TransactionsContext","transactions","addTransaction","useTransactionsContext","transactionReducer","payload","TransactionProvider","storage","setStorage","transactionName","updateTransactions","checkTransaction","tx","shouldCheck","getTransactionReceipt","hash","lastCheckedBlockNumber","chainTransactions","newTransactions","newTransaction","blocksSinceCheck","minutesPending","deployContract","contractAbi","signer","factory","ContractFactory","bytecode","deploy","deployTransaction","wait","LocalMulticallProvider","Unknown","localMulticallState","setLocalMulticallState","multicallBlockNumber","setMulticallBlockNumber","Deployed","Deploying","deployMulticall","multicallABI","contractAddress","NonLocal","awaitingMulticallBlock","DAppProvider","DAppProviderWithConfig","defaultAddresses","getMulticallAddresses","getMulticall2Addresses","multicallAddressesMerged","useChainState","multiChainState","useMulticallAddress","useRawCalls","filteredCalls","Boolean","extractCallResult","useRawCall","GET_CURRENT_BLOCK_TIMESTAMP_CALL","GET_CURRENT_BLOCK_DIFFICULTY_CALL","useBlockMeta","timestamp","difficulty","toNumber","useChainCalls","useChainCall","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","first","second","validateArguments","assertions","getOwnPropertyNames","key","useReadonlyNetwork","networkProvider","supportedChainIds","isUnsupportedChainId","indexOf","unsupportedChainIdError","readonlyNetwork","switchNetwork","connector","active","providerOrConnector","getProvider","setError","useCall","useCalls","rawCalls","idx","warnOnInvalidContractCall","useContractCall","useContractCalls","usePromiseTransaction","setState","resetState","promiseTransaction","transactionPromise","reason","e","TRANSACTION_REPLACED","replacement","cancelled","originalTransaction","connectContractToSigner","connect","useContractFunction","functionName","events","setEvents","contractWithSigner","logs","reduce","accumulatedLogs","log","parseLog","_err","useEtherBalance","useToken","tokenAddress","partialCall","symbol","totalSupply","useTokenBalance","tokenBalance","useTokenAllowance","ownerAddress","spenderAddress","allowance","getItem","item","parse","setValue","toStore","setItem","removeItem","useTransactions","defaultChainId","filtered","useInterval","callback","savedCallback","useRef","setInterval","clearInterval","getExpiredNotifications","creationTime","useNotifications","chainNotifications","expiredNotification","useSendTransaction","sendTransaction","transactionRequest","useGasPrice","_blockNumber","gasPrice","setGasPrice","updateGasPrice","getGasPrice","useLookupAddress","ens","setEns","mounted","lookupAddress","useTokenList","tokenListURI","overrideChainId","tags","providerChainId","tokenList","setTokenList","fetch","response","ok","json","logoURI","tokens","token","sameChainId","some","tag","includes","text","Promise","reject","useChainMeta","NFT","interfaceAbi","MintButton","singlePrice","setSinglePrice","ethers","r","temp","isBigNumberish","formatUnits","onClick","mintNFT","background","height","width","margin","paddingInlineStart","paddingInlineEnd","border","borderRadius","borderStyle","borderColor","_hover","backgroundColor","color","fontSize","BlockMintNFT","setTotalSupply","maxSupply","setMaxSupply","className","MetadataBox","dataList","metadata","templateColumns","gap","display","flexDirection","marginStart","rates","theme","extendTheme","components","Modal","baseStyle","props","dialog","maxWidth","minWidth","maxHeight","minHeight","bg","Header","styled","NftModal","isOpen","onClose","nftObject","ownerOf","setOwnerOf","String","slice","fileExtension","isCentered","size","px","fontWeight","pt","borderStartColor","borderEndColor","borderTopColor","borderBottomColor","src","alt","pb","alignItems","mt","mb","lineHeight","ml","href","isExternal","textDecoration","mr","GenerateCard","useDisclosure","onOpen","Card","Img","variant","Body","Title","Text","isActive","renderData","columns","innerWidth","spacing","todo","spacingY","PaginationComponent","nftObjects","setData","currentPage","setcurrentPage","itemsPerPage","pages","Math","ceil","indexOfLastItem","indexOfFirstItem","currentItems","pageNumberLimit","maxPageNumberLimit","setmaxPageNumberLimit","minPageNumberLimit","setminPageNumberLimit","handleClick","event","target","renderPageNumbers","handleNextbtn","handlePrevbtn","pageIncrementBtn","pageDecrementBtn","disabled","BlockRecentMints","objects","totalMinted","parseInt","newArray","concat","MakeArray","RecentMints","Home","AdminNFT","App","path","component","exact","StyledIdenticon","Identicon","ref","innerHTML","appendChild","Jazzicon","ConnectButton","handleOpenModal","etherBalance","py","parseFloat","formatEther","m","AccountModalCollection","balance","tokensOfOwner","setTokensOfOwner","indecies","Collection","objectList","AccountModal","balanceOf","setBalanceOf","marginTop","justifyContent","alignContent","onCopy","borderBottomLeftRadius","borderBottomRightRadius","padding","click","setClick","closeMobileMenu","require","default","Footer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fea60ffc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.e2ed3584.png\";","import { Interface } from '@ethersproject/abi'\r\nimport MultiCall from './MultiCall.json'\r\nimport MultiCall2 from './MultiCall2.json'\r\nimport ERC20 from './ERC20.json'\r\nimport ERC20Mock from './ERC20Mock.json'\r\n\r\nconst MultiCallABI = new Interface(MultiCall.abi)\r\n\r\nexport { MultiCall, MultiCallABI }\r\n\r\nconst MultiCall2ABI = new Interface(MultiCall2.abi)\r\n\r\nexport { MultiCall2, MultiCall2ABI }\r\n\r\nconst ERC20Interface = new Interface(ERC20.abi)\r\n\r\nexport { ERC20, ERC20Interface }\r\n\r\nconst ERC20MockInterface = new Interface(ERC20Mock.abi)\r\n\r\nexport { ERC20Mock, ERC20MockInterface }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Localhost: Chain = {\r\n  chainId: 1337,\r\n  chainName: 'Localhost',\r\n  isTestChain: true,\r\n  isLocalChain: true,\r\n  multicallAddress: '',\r\n  getExplorerAddressLink: () => '',\r\n  getExplorerTransactionLink: () => '',\r\n}\r\n\r\nexport const Hardhat: Chain = {\r\n  chainId: 31337,\r\n  chainName: 'Hardhat',\r\n  isTestChain: true,\r\n  isLocalChain: true,\r\n  multicallAddress: '',\r\n  getExplorerAddressLink: () => '',\r\n  getExplorerTransactionLink: () => '',\r\n}\r\n\r\nexport default {\r\n  Localhost,\r\n  Hardhat,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const ArbitrumRinkeby: Chain = {\r\n  chainId: 421611,\r\n  chainName: 'ArbitrumRinkeby',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xd27BEFd29F8Da4E187fDAEf663aEDF7742f9F47F',\r\n  getExplorerAddressLink: (address: string) => `https://testnet.arbiscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://testnet.arbiscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport const Arbitrum: Chain = {\r\n  chainId: 42161,\r\n  chainName: 'Arbitrum',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x8a0bd1773139C6609e861B9ab68082587a3cD581',\r\n  multicall2Address: '0x80c7dd17b01855a6d2347444a0fcc36136a314de',\r\n  getExplorerAddressLink: (address: string) => `https://arbiscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://arbiscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  ArbitrumRinkeby,\r\n  Arbitrum,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Avalanche: Chain = {\r\n  chainId: 43114,\r\n  chainName: 'Avalanche',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  getExplorerAddressLink: (address: string) => `https://snowtrace.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://snowtrace.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport const AvalancheTestnet: Chain = {\r\n  chainId: 43113,\r\n  chainName: 'AvalancheTestnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xccc75e78Dce6A20bCCa3a30deB23Cb4D23df993a',\r\n  getExplorerAddressLink: (address: string) => `https://testnet.snowtrace.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://testnet.snowtrace.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  Avalanche,\r\n  AvalancheTestnet,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const BSC: Chain = {\r\n  chainId: 56,\r\n  chainName: 'BSC',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x41263cba59eb80dc200f3e2544eda4ed6a90e76c',\r\n  getExplorerAddressLink: (address: string) => `https://bscscan.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://bscscan.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport const BSCTestnet: Chain = {\r\n  chainId: 97,\r\n  chainName: 'BSCTestnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xae11C5B5f29A6a25e955F0CB8ddCc416f522AF5C',\r\n  getExplorerAddressLink: (address: string) => `https://testnet.bscscan.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://testnet.bscscan.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  BSC,\r\n  BSCTestnet,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Cronos: Chain = {\r\n  chainId: 25,\r\n  chainName: 'Cronos',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x0fA4d452693F2f45D28c4EC4d20b236C4010dA74',\r\n  getExplorerAddressLink: (address: string) => `https://cronoscan.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://cronoscan.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport const CronosTestnet: Chain = {\r\n  chainId: 338,\r\n  chainName: 'CronosTestnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x6a8c1ba309136D78245f1F0a14790239b71a9577',\r\n  getExplorerAddressLink: (address: string) => `https://cronos.crypto.org/explorer/testnet3/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://cronos.crypto.org/explorer/testnet3/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  Cronos,\r\n  CronosTestnet,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Fantom: Chain = {\r\n  chainId: 250,\r\n  chainName: 'Fantom',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xdc85396592f0F466224390771C861EE3957a3ff4',\r\n  getExplorerAddressLink: (address: string) => `https://ftmscan.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://ftmscan.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport const FantomTestnet: Chain = {\r\n  chainId: 4002,\r\n  chainName: 'FantomTestnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xA01917aF773b703717C25C483a619e9218343531',\r\n  getExplorerAddressLink: (address: string) => `https://testnet.ftmscan.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://testnet.ftmscan.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport default { Fantom, FantomTestnet }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Harmony: Chain = {\r\n  chainId: 1666600000,\r\n  chainName: 'Harmony',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xFE4980f62D708c2A84D3929859Ea226340759320',\r\n  getExplorerAddressLink: (address: string) => `https://explorer.harmony.one/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://explorer.harmony.one/tx/${transactionHash}`,\r\n}\r\n\r\nexport default { Harmony }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Mainnet: Chain = {\r\n  chainId: 1,\r\n  chainName: 'Mainnet',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\r\n  multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',\r\n  getExplorerAddressLink: (address: string) => `https://etherscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://etherscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport const Ropsten: Chain = {\r\n  chainId: 3,\r\n  chainName: 'Ropsten',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x53c43764255c17bd724f74c4ef150724ac50a3ed',\r\n  multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',\r\n  getExplorerAddressLink: (address: string) => `https://ropsten.etherscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://ropsten.etherscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport const Rinkeby: Chain = {\r\n  chainId: 4,\r\n  chainName: 'Rinkeby',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821',\r\n  multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',\r\n  getExplorerAddressLink: (address: string) => `https://rinkeby.etherscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://rinkeby.etherscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport const Goerli: Chain = {\r\n  chainId: 5,\r\n  chainName: 'Goerli',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e',\r\n  multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',\r\n  getExplorerAddressLink: (address: string) => `https://goerli.etherscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://goerli.etherscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport const Kovan: Chain = {\r\n  chainId: 42,\r\n  chainName: 'Kovan',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a',\r\n  multicall2Address: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',\r\n  getExplorerAddressLink: (address: string) => `https://kovan.etherscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://kovan.etherscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  Mainnet,\r\n  Ropsten,\r\n  Rinkeby,\r\n  Goerli,\r\n  Kovan,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Stardust: Chain = {\r\n  chainId: 588,\r\n  chainName: 'Stardust',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xaF9D4DC0698d8FD9f41387ecb08D9976079B8086',\r\n  getExplorerAddressLink: (address: string) => `https://stardust-explorer.metis.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://stardust-explorer.metis.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport const Andromeda: Chain = {\r\n  chainId: 1088,\r\n  chainName: 'Andromeda',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x1a2AFb22B8A90A77a93e80ceA61f89D04e05b796',\r\n  getExplorerAddressLink: (address: string) => `https://andromeda-explorer.metis.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://andromeda-explorer.metis.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport default { Stardust, Andromeda }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Moonbeam: Chain = {\r\n  chainId: 1284,\r\n  chainName: 'Moonbeam',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x47152C4dCE75C77Bc9E52F5AAa2a20117971C365',\r\n  getExplorerAddressLink: (address: string) => `https://blockscout.moonbeam.network/address/${address}/transactions`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://blockscout.moonbeam.network/tx/${transactionHash}/internal-transactions`,\r\n}\r\n\r\nexport default { Moonbeam }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Moonriver: Chain = {\r\n  chainId: 1285,\r\n  chainName: 'Moonriver',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xa9177F8d98DAaB74C24715Ba0A81b73654710523',\r\n  getExplorerAddressLink: (address: string) =>\r\n    `https://blockscout.moonriver.moonbeam.network/address/${address}/transactions`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://blockscout.moonriver.moonbeam.network/tx/${transactionHash}/internal-transactions`,\r\n}\r\n\r\nexport const MoonbaseAlpha: Chain = {\r\n  chainId: 1287,\r\n  chainName: 'Moonbase Alpha',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x4E2cfca20580747AdBA58cd677A998f8B261Fc21',\r\n  getExplorerAddressLink: (address: string) => `https://moonbase.moonscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://moonbase.moonscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport default { Moonriver }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const OasisEmerald: Chain = {\r\n  chainId: 42262,\r\n  chainName: 'OasisEmerald',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xA1513CE1a147BB84E04cD61d877d598C018a460F',\r\n  getExplorerAddressLink: (address: string) => `https://explorer.emerald.oasis.dev/address/${address}/transactions`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://explorer.emerald.oasis.dev/tx/${transactionHash}/internal-transactions`,\r\n}\r\n\r\nexport const OasisEmeraldTestnet: Chain = {\r\n  chainId: 42261,\r\n  chainName: 'OasisEmeraldTestnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xB2929229096d2ee6850c4d3906ef2d1f1330cdc7',\r\n  getExplorerAddressLink: (address: string) =>\r\n    `https://testnet.explorer.emerald.oasis.dev/address/${address}/transactions`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://testnet.explorer.emerald.oasis.dev/tx/${transactionHash}/internal-transactions`,\r\n}\r\n\r\nexport default { OasisEmerald, OasisEmeraldTestnet }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Palm: Chain = {\r\n  chainId: 11297108109,\r\n  chainName: 'Palm',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x99a73dfE34578348fb81BD078201C0BA84E9c840',\r\n  getExplorerAddressLink: (address: string) => `https://explorer.palm.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://explorer.palm.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport const PalmTestnet: Chain = {\r\n  chainId: 11297108099,\r\n  chainName: 'Palm Testnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x99a73dfE34578348fb81BD078201C0BA84E9c840',\r\n  getExplorerAddressLink: (address: string) => `https://explorer.palm-uat.xyz/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://explorer.palm-uat.xyz/tx/${transactionHash}`,\r\n}\r\n\r\nexport default { Palm, PalmTestnet }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Polygon: Chain = {\r\n  chainId: 137,\r\n  chainName: 'Polygon',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x11ce4B23bD875D7F5C6a31084f55fDe1e9A87507',\r\n  getExplorerAddressLink: (address: string) => `https://polygonscan.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://polygonscan.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport const Mumbai: Chain = {\r\n  chainId: 80001,\r\n  chainName: 'Mumbai',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x08411ADd0b5AA8ee47563b146743C13b3556c9Cc',\r\n  getExplorerAddressLink: (address: string) => `https://mumbai.polygonscan.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://mumbai.polygonscan.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport default { Polygon, Mumbai }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Songbird: Chain = {\r\n  chainId: 19,\r\n  chainName: 'Songbird',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x60351436cf80A31EA6C3B261C784d3C127dBD6f1',\r\n  getExplorerAddressLink: (address: string) => `https://songbird-explorer.flare.network/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://songbird-explorer.flare.network/tx/${transactionHash}`,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Theta: Chain = {\r\n  chainId: 361,\r\n  chainName: 'Theta',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xe2ec58a54f3ab2714eddbae87533793011f1e14e',\r\n  getExplorerAddressLink: (address: string) => `https://explorer.thetatoken.org/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://explorer.thetatoken.org/tx/${transactionHash}`,\r\n}\r\n\r\nexport const ThetaTestnet: Chain = {\r\n  chainId: 365,\r\n  chainName: 'ThetaTestnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xf822bf2e728e264c58d7618022addd9cbc780350',\r\n  getExplorerAddressLink: (address: string) => `https://testnet-explorer.thetatoken.org/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://testnet-explorer.thetatoken.org/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  Theta,\r\n  ThetaTestnet,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const ThunderCore: Chain = {\r\n  chainId: 108,\r\n  chainName: 'ThunderCore Mainnet',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x3017086DeEf56679e267F67F66c4415109b7A97f',\r\n  multicall2Address: '0xd1dC5CF410b227dFEeFEe8D3c1C9DB4FBE66d362',\r\n  getExplorerAddressLink: (address: string) => `https://viewblock.io/thundercore/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://viewblock.io/thundercore/tx/${transactionHash}`,\r\n}\r\n\r\nexport const ThunderCoreTestnet: Chain = {\r\n  chainId: 18,\r\n  chainName: 'ThunderCore Testnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x7818a6A0fFe134b2aF30850DCE7c86A52eC6AC4F',\r\n  multicall2Address: '0x02C5503dd793cC457a1CE50d2d31a749cb5e9cB5',\r\n  getExplorerAddressLink: (address: string) => `https://explorer-testnet.thundercore.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://explorer-testnet.thundercore.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  ThunderCore,\r\n  ThunderCoreTestnet,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const xDai: Chain = {\r\n  chainId: 100,\r\n  chainName: 'xDai',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a',\r\n  getExplorerAddressLink: (address: string) => `https://blockscout.com/poa/xdai/address/${address}/transactions`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://blockscout.com/poa/xdai/tx/${transactionHash}/internal-transactions`,\r\n}\r\n\r\n// xdai alias\r\nexport const Gnosis = {\r\n  ...xDai,\r\n  chainName: 'Gnosis',\r\n}\r\n\r\nexport default { xDai, Gnosis }\r\n","import { Chain } from '../../constants'\r\n\r\nexport const OptimismKovan: Chain = {\r\n  chainId: 69,\r\n  chainName: 'OptimismKovan',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0xE71bf4622578c7d1526A88CD3060f03030E99a04',\r\n  getExplorerAddressLink: (address: string) => `https://kovan-optimistic.etherscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://kovan-optimistic.etherscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport const Optimism: Chain = {\r\n  chainId: 10,\r\n  chainName: 'Optimism',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x35A6Cdb2C9AD4a45112df4a04147EB07dFA01aB7',\r\n  getExplorerAddressLink: (address: string) => `https://optimistic.etherscan.io/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://optimistic.etherscan.io/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  OptimismKovan,\r\n  Optimism,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Aurora: Chain = {\r\n  chainId: 1313161554,\r\n  chainName: 'Aurora',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x32b50c286DEFd2932a0247b8bb940b78c063F16c',\r\n  multicall2Address: '0xace58a26b8Db90498eF0330fDC9C2655db0C45E2',\r\n  getExplorerAddressLink: (address) => `https://explorer.mainnet.aurora.dev/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash) => `https://explorer.mainnet.aurora.dev/tx/${transactionHash}`,\r\n}\r\n\r\nexport const AuroraTestnet: Chain = {\r\n  chainId: 1313161555,\r\n  chainName: 'Aurora Testnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x755E730F28A31079711aB588e3568e70A40F3564',\r\n  getExplorerAddressLink: (address) => `https://explorer.testnet.aurora.dev/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash) => `https://explorer.testnet.aurora.dev/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  Aurora,\r\n  AuroraTestnet,\r\n}\r\n","import { Chain } from '../../constants'\r\n\r\nexport const Velas: Chain = {\r\n  chainId: 106,\r\n  chainName: 'Velas Mainnet',\r\n  isTestChain: false,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x55c77eEba2b891c7f940cE4C3d9Fcd6915c12082',\r\n  multicall2Address: '0x324f25e6eEB13D45DF559B7326d631e34Fd5ceDF',\r\n  getExplorerAddressLink: (address: string) => `https://evmexplorer.velas.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) => `https://evmexplorer.velas.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport const VelasTestnet: Chain = {\r\n  chainId: 111,\r\n  chainName: 'Velas Testnet',\r\n  isTestChain: true,\r\n  isLocalChain: false,\r\n  multicallAddress: '0x649DEa474f0Ca0FDb276098d1A4c8BA62b4abC83',\r\n  multicall2Address: '0x65f4f071505912dbC9dCCF3a51542374a43D6a5A',\r\n  getExplorerAddressLink: (address: string) => `https://evmexplorer.testnet.velas.com/address/${address}`,\r\n  getExplorerTransactionLink: (transactionHash: string) =>\r\n    `https://evmexplorer.testnet.velas.com/tx/${transactionHash}`,\r\n}\r\n\r\nexport default {\r\n  Velas,\r\n  VelasTestnet,\r\n}\r\n","export const DEFAULT_OPTIONS = {\r\n  decimals: 0,\r\n  thousandSeparator: ',',\r\n  decimalSeparator: '.',\r\n  significantDigits: Infinity,\r\n  useFixedPrecision: false,\r\n  fixedPrecisionDigits: 0,\r\n  prefix: '',\r\n  suffix: '',\r\n}\r\n\r\nexport type CurrencyFormatOptions = typeof DEFAULT_OPTIONS\r\n\r\nconst INPUT_REGEX = /^\\d*$/\r\n\r\nexport function formatCurrency(options: CurrencyFormatOptions, value: string): string {\r\n  if (!INPUT_REGEX.test(value)) {\r\n    throw new TypeError('Invalid input, decimal string expected.')\r\n  }\r\n  const number = formatNumber(options, value)\r\n  return [options.prefix, number, options.suffix].join('')\r\n}\r\n\r\nfunction formatNumber(options: CurrencyFormatOptions, value: string) {\r\n  const integer = getIntegerPart(value, options.decimals)\r\n  const thousands = splitThousands(integer, options.thousandSeparator)\r\n  const decimal = getDecimalPart(value, options.decimals)\r\n  const digits = options.useFixedPrecision\r\n    ? toFixed(decimal, options.fixedPrecisionDigits)\r\n    : toSignificant(decimal, integer.length, options.significantDigits)\r\n  return joinDecimals(thousands, digits, options.decimalSeparator)\r\n}\r\n\r\nfunction getIntegerPart(value: string, decimals: number) {\r\n  if (value.length <= decimals) {\r\n    return '0'\r\n  } else {\r\n    const fragment = value.substring(0, value.length - decimals)\r\n    return stripFrontZeroes(fragment)\r\n  }\r\n}\r\n\r\nfunction stripFrontZeroes(value: string) {\r\n  const stripped = value.replace(/^0+/, '')\r\n  return stripped || '0'\r\n}\r\n\r\nfunction splitThousands(value: string, separator: string) {\r\n  const count = value.length / 3\r\n  const resultValue = value.split('')\r\n  for (let i = 1; i < count; i++) {\r\n    resultValue.splice(-4 * i + 1, 0, separator)\r\n  }\r\n  return resultValue.join('')\r\n}\r\n\r\nfunction getDecimalPart(value: string, decimals: number) {\r\n  if (value.length <= decimals) {\r\n    return value.padStart(decimals, '0')\r\n  } else {\r\n    return value.substring(value.length - decimals)\r\n  }\r\n}\r\n\r\nfunction joinDecimals(integer: string, decimals: string, separator: string) {\r\n  if (!decimals) {\r\n    return integer\r\n  } else {\r\n    return `${integer}${separator}${decimals}`\r\n  }\r\n}\r\n\r\nfunction toSignificant(decimal: string, integerLength: number, significantDigits: number) {\r\n  const length = significantDigits - integerLength\r\n  if (length > decimal.length) {\r\n    return stripEndZeroes(decimal)\r\n  } else {\r\n    return stripEndZeroes(decimal.substring(0, length))\r\n  }\r\n}\r\n\r\nfunction stripEndZeroes(value: string) {\r\n  return value.replace(/0+$/, '')\r\n}\r\n\r\nfunction toFixed(decimal: string, fixedPrecisionDigits: number) {\r\n  if (fixedPrecisionDigits > decimal.length) {\r\n    return decimal.padEnd(fixedPrecisionDigits, '0')\r\n  } else {\r\n    return decimal.substring(0, fixedPrecisionDigits)\r\n  }\r\n}\r\n","import { CurrencyFormatOptions, DEFAULT_OPTIONS, formatCurrency } from './formatting'\r\n\r\n/**\r\n * @public\r\n */\r\nexport class Currency {\r\n  public formattingOptions: CurrencyFormatOptions\r\n\r\n  constructor(\r\n    readonly name: string,\r\n    readonly ticker: string,\r\n    readonly decimals: number,\r\n    formattingOptions: Partial<CurrencyFormatOptions> = {}\r\n  ) {\r\n    this.formattingOptions = { ...DEFAULT_OPTIONS, decimals, ...formattingOptions }\r\n  }\r\n\r\n  format(value: string, overrideOptions: Partial<CurrencyFormatOptions> = {}) {\r\n    return formatCurrency({ ...this.formattingOptions, ...overrideOptions }, value)\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class FiatCurrency extends Currency {\r\n  constructor(name: string, ticker: string, decimals = 2, formattingOptions: Partial<CurrencyFormatOptions> = {}) {\r\n    super(name, ticker, decimals, {\r\n      useFixedPrecision: true,\r\n      fixedPrecisionDigits: decimals,\r\n      ...formattingOptions,\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class NativeCurrency extends Currency {\r\n  constructor(\r\n    name: string,\r\n    ticker: string,\r\n    readonly chainId: number,\r\n    decimals = 18,\r\n    formattingOptions: Partial<CurrencyFormatOptions> = {}\r\n  ) {\r\n    super(name, ticker, decimals, {\r\n      suffix: ` ${ticker}`,\r\n      significantDigits: 6,\r\n      ...formattingOptions,\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class Token extends Currency {\r\n  constructor(\r\n    name: string,\r\n    ticker: string,\r\n    readonly chainId: number,\r\n    readonly address: string,\r\n    decimals = 18,\r\n    formattingOptions: Partial<CurrencyFormatOptions> = {}\r\n  ) {\r\n    super(name, ticker, decimals, {\r\n      suffix: ` ${ticker}`,\r\n      significantDigits: 6,\r\n      ...formattingOptions,\r\n    })\r\n  }\r\n}\r\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber'\r\nimport { Currency } from './Currency'\r\nimport { CurrencyFormatOptions } from './formatting'\r\n\r\n/**\r\n * @public\r\n */\r\nexport class CurrencyValue {\r\n  constructor(readonly currency: Currency, readonly value: BigNumber) {}\r\n\r\n  static fromString(currency: Currency, value: string) {\r\n    return new CurrencyValue(currency, BigNumber.from(value))\r\n  }\r\n\r\n  static zero(currency: Currency) {\r\n    return new CurrencyValue(currency, BigNumber.from(0))\r\n  }\r\n\r\n  toString() {\r\n    return this.value.toString()\r\n  }\r\n\r\n  format(overrideOptions: Partial<CurrencyFormatOptions> = {}) {\r\n    return this.currency.format(this.value.toString(), overrideOptions)\r\n  }\r\n\r\n  private checkCurrency(other: CurrencyValue) {\r\n    if (this.currency !== other.currency) {\r\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`)\r\n    }\r\n  }\r\n\r\n  map(fn: (value: BigNumber) => BigNumber) {\r\n    return new CurrencyValue(this.currency, fn(this.value))\r\n  }\r\n\r\n  add(other: CurrencyValue) {\r\n    this.checkCurrency(other)\r\n    return this.map((x) => x.add(other.value))\r\n  }\r\n\r\n  sub(other: CurrencyValue) {\r\n    this.checkCurrency(other)\r\n    return this.map((x) => x.sub(other.value))\r\n  }\r\n\r\n  mul(value: BigNumberish) {\r\n    return this.map((x) => x.mul(value))\r\n  }\r\n\r\n  div(value: BigNumberish) {\r\n    return this.map((x) => x.div(value))\r\n  }\r\n\r\n  mod(value: BigNumberish) {\r\n    return this.map((x) => x.mod(value))\r\n  }\r\n\r\n  equals(other: CurrencyValue) {\r\n    return this.currency === other.currency && this.value.eq(other.value)\r\n  }\r\n\r\n  lt(other: CurrencyValue) {\r\n    this.checkCurrency(other)\r\n    return this.value.lt(other.value)\r\n  }\r\n\r\n  lte(other: CurrencyValue) {\r\n    this.checkCurrency(other)\r\n    return this.value.lte(other.value)\r\n  }\r\n\r\n  gt(other: CurrencyValue) {\r\n    this.checkCurrency(other)\r\n    return this.value.gt(other.value)\r\n  }\r\n\r\n  gte(other: CurrencyValue) {\r\n    this.checkCurrency(other)\r\n    return this.value.gte(other.value)\r\n  }\r\n\r\n  isZero() {\r\n    return this.value.isZero()\r\n  }\r\n}\r\n","import { TransactionResponse, TransactionReceipt } from '@ethersproject/abstract-provider'\r\n\r\n/**\r\n * @public\r\n */\r\nexport type TransactionState = 'None' | 'PendingSignature' | 'Mining' | 'Success' | 'Fail' | 'Exception'\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface TransactionStatus {\r\n  status: TransactionState\r\n  transaction?: TransactionResponse\r\n  receipt?: TransactionReceipt\r\n  chainId?: number\r\n  errorMessage?: string\r\n  originalTransaction?: TransactionResponse\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function transactionErrored(transaction: TransactionStatus) {\r\n  return 'errorMessage' in transaction\r\n}\r\n","// organize imports in alphabet order to sparse the conflict when adding a new chain\r\nimport {\r\n  Localhost,\r\n  Hardhat,\r\n  Arbitrum,\r\n  ArbitrumRinkeby,\r\n  Avalanche,\r\n  AvalancheTestnet,\r\n  Aurora,\r\n  AuroraTestnet,\r\n  BSC,\r\n  BSCTestnet,\r\n  Cronos,\r\n  CronosTestnet,\r\n  Fantom,\r\n  FantomTestnet,\r\n  Harmony,\r\n  Mainnet,\r\n  Ropsten,\r\n  Rinkeby,\r\n  Gnosis,\r\n  Goerli,\r\n  Kovan,\r\n  Andromeda,\r\n  Stardust,\r\n  Moonriver,\r\n  MoonbaseAlpha,\r\n  Moonbeam,\r\n  Palm,\r\n  PalmTestnet,\r\n  Polygon,\r\n  Mumbai,\r\n  OasisEmerald,\r\n  OasisEmeraldTestnet,\r\n  Songbird,\r\n  Theta,\r\n  ThetaTestnet,\r\n  ThunderCore,\r\n  ThunderCoreTestnet,\r\n  OptimismKovan,\r\n  Optimism,\r\n  Velas,\r\n  VelasTestnet,\r\n} from '../model'\r\n\r\n// rough alphabet order (put network from the same chain together)\r\nexport const DEFAULT_SUPPORTED_CHAINS = [\r\n  Localhost,\r\n  Hardhat,\r\n  Avalanche,\r\n  AvalancheTestnet,\r\n  Arbitrum,\r\n  ArbitrumRinkeby,\r\n  Aurora,\r\n  AuroraTestnet,\r\n  Mainnet,\r\n  Ropsten,\r\n  Rinkeby,\r\n  Goerli,\r\n  Kovan,\r\n  BSC,\r\n  BSCTestnet,\r\n  Cronos,\r\n  CronosTestnet,\r\n  Fantom,\r\n  FantomTestnet,\r\n  Gnosis,\r\n  Harmony,\r\n  Andromeda,\r\n  Stardust,\r\n  Moonriver,\r\n  MoonbaseAlpha,\r\n  Moonbeam,\r\n  Palm,\r\n  PalmTestnet,\r\n  Polygon,\r\n  Mumbai,\r\n  OasisEmerald,\r\n  OasisEmeraldTestnet,\r\n  Songbird,\r\n  Theta,\r\n  ThetaTestnet,\r\n  ThunderCore,\r\n  ThunderCoreTestnet,\r\n  OptimismKovan,\r\n  Optimism,\r\n  Velas,\r\n  VelasTestnet,\r\n]\r\n\r\nexport enum ChainId {\r\n  Mainnet = 1,\r\n  Ropsten = 3,\r\n  Rinkeby = 4,\r\n  Goerli = 5,\r\n  ThunderCoreTestnet = 18,\r\n  Cronos = 25,\r\n  CronosTestnet = 338,\r\n  Kovan = 42,\r\n  BSC = 56,\r\n  BSCTestnet = 97,\r\n  xDai = 100,\r\n  Gnosis = 100,\r\n  ThunderCore = 108,\r\n  Polygon = 137,\r\n  Theta = 361,\r\n  ThetaTestnet = 365,\r\n  Moonriver = 1285,\r\n  Moonbeam = 1284,\r\n  Mumbai = 80001,\r\n  Harmony = 1666600000,\r\n  Palm = 11297108109,\r\n  PalmTestnet = 11297108099,\r\n  Localhost = 1337,\r\n  Hardhat = 31337,\r\n  Fantom = 250,\r\n  FantomTestnet = 4002,\r\n  Avalanche = 43114,\r\n  AvalancheTestnet = 43113,\r\n  Songbird = 19,\r\n  MoonbaseAlpha = 1287,\r\n  OasisEmerald = 42262,\r\n  OasisEmeraldTestnet = 42261,\r\n  Stardust = 588,\r\n  Andromeda = 1088,\r\n  OptimismKovan = 69,\r\n  Optimism = 10,\r\n  Arbitrum = 42161,\r\n  ArbitrumRinkeby = 421611,\r\n  Aurora = 1313161554,\r\n  AuroraTestnet = 1313161555,\r\n  Velas = 106,\r\n  VelasTestnet = 111,\r\n}\r\n","import { NativeCurrency, Token } from '../model'\r\nimport { Mainnet, Kovan } from '../model/chain/ethereum'\r\nimport { BSC, BSCTestnet } from '../model/chain/bsc'\r\n\r\nexport const Ether = new NativeCurrency('Ether', 'ETH', Mainnet.chainId)\r\nexport const Dai = new Token('Dai', 'DAI', Mainnet.chainId, '0x6B175474E89094C44Da98b954EedeAC495271d0F')\r\n\r\nexport const KovanEther = new NativeCurrency('Kovan Ether', 'KETH', Kovan.chainId)\r\nexport const KovanDai = new Token('Dai', 'DAI', Kovan.chainId, '0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa')\r\n\r\nexport const BNB = new NativeCurrency('Binance Coin', 'BNB', BSC.chainId)\r\nexport const BUSD = new Token('Binance USD', 'BUSD', BSC.chainId, '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56')\r\n\r\nexport const TestBNB = new NativeCurrency('Test Binance Coin', 'TBNB', BSCTestnet.chainId)\r\nexport const TestBUSD = new Token(\r\n  'Test Binance USD',\r\n  'TBUSD',\r\n  BSCTestnet.chainId,\r\n  '0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47'\r\n)\r\n\r\nexport const NATIVE_CURRENCY = {\r\n  [Mainnet.chainId]: Ether,\r\n  [Kovan.chainId]: KovanEther,\r\n  [BSC.chainId]: BNB,\r\n  [BSCTestnet.chainId]: TestBNB,\r\n}\r\n","import { DEFAULT_SUPPORTED_CHAINS, FullConfig } from '../../constants'\r\n\r\nexport const DEFAULT_CONFIG: FullConfig = {\r\n  pollingInterval: 15000,\r\n  supportedChains: undefined,\r\n  networks: DEFAULT_SUPPORTED_CHAINS,\r\n  notifications: {\r\n    checkInterval: 500,\r\n    expirationPeriod: 5000,\r\n  },\r\n  localStorage: {\r\n    transactionPath: 'transactions',\r\n  },\r\n  autoConnect: true,\r\n  multicallVersion: 1,\r\n}\r\n","import { DEFAULT_SUPPORTED_CHAINS, ChainId } from '../constants'\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport const getChainById = (chainId: ChainId) =>\r\n  DEFAULT_SUPPORTED_CHAINS.find((network) => network.chainId === chainId)\r\n\r\nconst deprecationWarning = (methodName: string) =>\r\n  console.warn(`${methodName} is deprecated, can call with Chain directly`)\r\n\r\n/**\r\n * @public\r\n * @deprecated\r\n */\r\nexport const getExplorerAddressLink = (address: string, chainId: ChainId): string | '' => {\r\n  deprecationWarning('getExplorerAddressLink')\r\n  return getChainById(chainId)?.getExplorerAddressLink(address) || ''\r\n}\r\n\r\n/**\r\n * @public\r\n * @deprecated\r\n */\r\nexport const getExplorerTransactionLink = (transactionHash: string, chainId: ChainId): string | '' => {\r\n  deprecationWarning('getExplorerTransactionLink')\r\n  return getChainById(chainId)?.getExplorerTransactionLink(transactionHash) || ''\r\n}\r\n\r\n/**\r\n * @public\r\n * @deprecated\r\n */\r\nexport const getChainName = (chainId: ChainId) => {\r\n  deprecationWarning('getChainName')\r\n  return getChainById(chainId)?.chainName || ''\r\n}\r\n\r\n/**\r\n * @public\r\n * @deprecated\r\n */\r\nexport const isTestChain = (chainId: ChainId) => {\r\n  deprecationWarning('isTestChain')\r\n  return getChainById(chainId)?.isTestChain || false\r\n}\r\n\r\n/**\r\n * @public\r\n * @deprecated\r\n */\r\nexport const isLocalChain = (chainId: ChainId) => {\r\n  deprecationWarning('isLocalChain')\r\n  return getChainById(chainId)?.isLocalChain || false\r\n}\r\n","import { createContext, useContext } from 'react'\r\nimport { FullConfig, Config, Chain } from '../../constants'\r\nimport { DEFAULT_CONFIG } from '../../model/config/default'\r\nimport { getChainById } from '../../helpers/chain'\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport const ConfigContext = createContext<{ config: FullConfig; updateConfig: (config: Config) => void }>({\r\n  config: DEFAULT_CONFIG,\r\n  updateConfig: () => undefined,\r\n})\r\n\r\nconst validConfigs = (configs: FullConfig): FullConfig | Record<string, never> => {\r\n  if (!configs?.networks || configs?.networks.length === 0) {\r\n    console.warn('No networks or supportedChain configured')\r\n  }\r\n  return configs\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useConfig() {\r\n  const { config } = useContext(ConfigContext)\r\n\r\n  // backward compatible with supportedChains\r\n  if (config.supportedChains) {\r\n    console.warn('supportedChain is deprecated, please pass networks instead')\r\n    const networks: Chain[] = config.supportedChains?.map((chainId) => getChainById(chainId)) as Chain[]\r\n    return validConfigs({\r\n      ...config,\r\n      networks,\r\n    })\r\n  }\r\n\r\n  return validConfigs(config)\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useUpdateConfig() {\r\n  const { updateConfig } = useContext(ConfigContext)\r\n  return updateConfig\r\n}\r\n","import { FullConfig, Config } from '../..'\r\nimport merge from 'lodash.merge'\r\n\r\nexport function configReducer(state: FullConfig, action: Config): FullConfig {\r\n  return merge({}, state, action)\r\n}\r\n","import { ReactNode, useReducer } from 'react'\r\nimport pickBy from 'lodash.pickby'\r\nimport { Config, FullConfig } from '../../constants'\r\nimport { DEFAULT_CONFIG } from '../../model/config/default'\r\nimport { ConfigContext } from './context'\r\nimport { configReducer } from './reducer'\r\n\r\ninterface ConfigProviderProps {\r\n  children: ReactNode\r\n  config: Config\r\n}\r\n\r\n/**\r\n * We strip supplied config of undefined fields because it can easily break TS assumptions.\r\n *\r\n * Illustrative example:\r\n *\r\n * type FullConf = { something: string }\r\n * type PartConf = Partial<FullConf>\r\n *\r\n * const defaultConf: FullConf = { something: 'default' }\r\n * const suppliedConf: PartConf = { something: undefined }\r\n * const conf: FullConf = {...defaultConf, ...suppliedConf}\r\n * conf.something.toString() // OK according to TS, breaks on runtime.\r\n *\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nconst noUndefined = (x: any) => x !== undefined\r\nexport function ConfigProvider({ config, children }: ConfigProviderProps) { \r\n  const configWithDefaults: FullConfig = {\r\n    ...DEFAULT_CONFIG,\r\n    ...pickBy(config, noUndefined),\r\n    notifications: {\r\n      ...DEFAULT_CONFIG.notifications,\r\n      ...pickBy(config.notifications, noUndefined),\r\n    },\r\n  }\r\n  const [reducedConfig, dispatch] = useReducer(configReducer, configWithDefaults)\r\n  return <ConfigContext.Provider value={{ config: reducedConfig, updateConfig: dispatch }} children={children} />\r\n}\r\n","import { createContext, useContext } from 'react'\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport const BlockNumberContext = createContext<number | undefined>(undefined)\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useBlockNumber(): number | undefined {\r\n  return useContext(BlockNumberContext)\r\n}\r\n","interface BlockNumberState {\r\n  [chainId: number]: number | undefined\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport interface BlockNumberChanged {\r\n  chainId: number\r\n  blockNumber: number\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function blockNumberReducer(state: BlockNumberState = {}, action: BlockNumberChanged) {\r\n  const current = state[action.chainId]\r\n  if (!current || action.blockNumber > current) {\r\n    return {\r\n      ...state,\r\n      [action.chainId]: action.blockNumber,\r\n    }\r\n  }\r\n  return state\r\n}\r\n","import { BaseProvider } from '@ethersproject/providers'\r\nimport { ChainId } from '../../../constants'\r\nimport { Dispatch } from 'react'\r\nimport { BlockNumberChanged } from './reducer'\r\n\r\nexport function subscribeToNewBlock(\r\n  provider: BaseProvider | undefined,\r\n  chainId: ChainId | undefined,\r\n  dispatch: Dispatch<BlockNumberChanged>\r\n) {\r\n  if (provider && chainId !== undefined) {\r\n    const update = (blockNumber: number) => dispatch({ chainId, blockNumber })\r\n    provider.on('block', update)\r\n\r\n    provider.getBlockNumber().then(\r\n      (blockNumber) => update(blockNumber),\r\n      (err) => {\r\n        console.error(err)\r\n      }\r\n    )\r\n\r\n    return () => {\r\n      provider.off('block', update)\r\n    }\r\n  }\r\n\r\n  return () => undefined\r\n}\r\n","import { ReactNode, useEffect, useReducer } from 'react'\r\nimport { BlockNumberContext } from './context'\r\nimport { blockNumberReducer } from '../common/reducer'\r\nimport { useDebounce, useEthers } from '../../../hooks'\r\nimport { subscribeToNewBlock } from '../common/subscribeToNewBlock'\r\n\r\ninterface Props {\r\n  children: ReactNode\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function BlockNumberProvider({ children }: Props) {\r\n  const { library, chainId } = useEthers()\r\n  const [state, dispatch] = useReducer(blockNumberReducer, {})\r\n\r\n  useEffect(() => subscribeToNewBlock(library, chainId, dispatch), [library, chainId])\r\n\r\n  const debouncedState = useDebounce(state, 100)\r\n  const blockNumber = chainId !== undefined ? debouncedState[chainId] : undefined\r\n\r\n  return <BlockNumberContext.Provider value={blockNumber} children={children} />\r\n}\r\n","import { createContext, useContext } from 'react'\r\nimport { Action, ChainState } from '..'\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport interface SingleChainState {\r\n  value?: {\r\n    blockNumber: number\r\n    state?: ChainState\r\n    error?: unknown\r\n  }\r\n  multicallAddress: string | undefined\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport type MultiChainState = {\r\n  [chainId in number]?: SingleChainState\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport const MultiChainStatesContext = createContext<{\r\n  chains: MultiChainState\r\n  dispatchCalls: (action: Action) => void\r\n}>({\r\n  chains: {},\r\n  dispatchCalls: () => undefined,\r\n})\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function useMultiChainStates() {\r\n  return useContext(MultiChainStatesContext)\r\n}\r\n","import { utils } from 'ethers'\r\nimport { Call } from '../hooks/useCall'\r\nimport { Awaited, ContractMethodNames, Falsy, TypedContract } from '../model/types'\r\nimport { RawCall, RawCallResult } from '../providers'\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function warnOnInvalidCall(call: Call | Falsy) {\r\n  if (!call) {\r\n    return\r\n  }\r\n  const { contract, method, args } = call\r\n  console.warn(`Invalid contract call: address=${contract.address} method=${method} args=${args}`)\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function encodeCallData(call: Call | Falsy, chainId: number, isStatic?: boolean): RawCall | Falsy {\r\n  if (!call) {\r\n    return undefined\r\n  }\r\n  const { contract, method, args } = call\r\n  if (!contract.address || !method) {\r\n    warnOnInvalidCall(call)\r\n    return undefined\r\n  }\r\n  try {\r\n    return { address: contract.address, data: contract.interface.encodeFunctionData(method, args), chainId, isStatic }\r\n  } catch {\r\n    warnOnInvalidCall(call)\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function getUniqueActiveCalls(requests: RawCall[]) {\r\n  const unique: RawCall[] = []\r\n  const used: Record<string, boolean> = {}\r\n  for (const request of requests) {\r\n    if (request.isDisabled) {\r\n      continue\r\n    }\r\n    if (!used[`${request.address.toLowerCase()}${request.data}${request.chainId}`]) {\r\n      unique.push(request)\r\n      used[`${request.address.toLowerCase()}${request.data}${request.chainId}`] = true\r\n    }\r\n  }\r\n  return unique\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport type CallResult<T extends TypedContract, MN extends ContractMethodNames<T>> =\r\n  | { value: Awaited<ReturnType<T['functions'][MN]>>; error: undefined }\r\n  | { value: undefined; error: Error }\r\n  | undefined\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function decodeCallResult<T extends TypedContract, MN extends ContractMethodNames<T>>(\r\n  call: Call | Falsy,\r\n  result: RawCallResult\r\n): CallResult<T, MN> {\r\n  if (!result || !call) {\r\n    return undefined\r\n  }\r\n  const { value, success } = result\r\n  try {\r\n    if (success) {\r\n      return {\r\n        value: call.contract.interface.decodeFunctionResult(call.method, value) as Awaited<\r\n          ReturnType<T['functions'][MN]>\r\n        >,\r\n        error: undefined,\r\n      }\r\n    } else {\r\n      const errorMessage: string = new utils.Interface(['function Error(string)']).decodeFunctionData('Error', value)[0]\r\n      return {\r\n        value: undefined,\r\n        error: new Error(errorMessage),\r\n      }\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      value: undefined,\r\n      error: error as Error,\r\n    }\r\n  }\r\n}\r\n","export function shortenString(str: string) {\r\n  return str.substring(0, 6) + '...' + str.substring(str.length - 4)\r\n}\r\n","import { utils } from 'ethers'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { Falsy } from '../model/types'\r\nimport { shortenString } from './common'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function shortenAddress(address: string): string {\r\n  try {\r\n    const formattedAddress = utils.getAddress(address)\r\n    return shortenString(formattedAddress)\r\n  } catch {\r\n    throw new TypeError(\"Invalid input, address can't be parsed\")\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function shortenIfAddress(address: string | Falsy): string {\r\n  if (typeof address === 'string' && address.length > 0) {\r\n    return shortenAddress(address)\r\n  }\r\n  return ''\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function compareAddress(firstAddress: string, secondAddress: string): number {\r\n  try {\r\n    const parsedFirstAddress = BigNumber.from(firstAddress)\r\n    const parsedSecondAddress = BigNumber.from(secondAddress)\r\n\r\n    if (parsedFirstAddress.gt(parsedSecondAddress)) {\r\n      return 1\r\n    }\r\n\r\n    if (parsedFirstAddress.lt(parsedSecondAddress)) {\r\n      return -1\r\n    }\r\n\r\n    return 0\r\n  } catch {\r\n    throw new TypeError(\"Invalid input, address can't be parsed\")\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function addressEqual(firstAddress: string, secondAddress: string): boolean {\r\n  try {\r\n    return utils.getAddress(firstAddress) === utils.getAddress(secondAddress)\r\n  } catch {\r\n    throw new TypeError(\"Invalid input, address can't be parsed\")\r\n  }\r\n}\r\n","import { Falsy } from '../model/types'\r\nimport { shortenString } from './common'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function shortenTransactionHash(transactionHash: string): string {\r\n  if (transactionHash.length < 10) {\r\n    throw new TypeError('Invalid input, transaction hash need to have at least 10 characters')\r\n  }\r\n\r\n  return shortenString(transactionHash)\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function shortenIfTransactionHash(transactionHash: string | Falsy): string {\r\n  if (typeof transactionHash === 'string' && transactionHash.length > 0) {\r\n    return shortenTransactionHash(transactionHash)\r\n  }\r\n  return ''\r\n}\r\n","import { Chain, ChainId } from '../constants'\r\nimport * as chains from '../model/chain'\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function getChainMeta(chainId: ChainId): Chain {\r\n  const chain = Object.values(chains).find((chain) => chain.chainId === chainId)\r\n  if (!chain) {\r\n    throw new Error(`Chain ${chainId} does not exist`)\r\n  }\r\n  return chain\r\n}\r\n","import { Web3Provider } from '@ethersproject/providers'\r\nimport detectEthereumProvider from '@metamask/detect-provider'\r\n\r\nexport async function getInjectedProvider(pollingInterval: number) {\r\n  const injectedProvider: any = await detectEthereumProvider()\r\n  if (!injectedProvider) {\r\n    return undefined\r\n  }\r\n\r\n  const provider = new Web3Provider(injectedProvider, 'any')\r\n  provider.pollingInterval = pollingInterval\r\n  return provider\r\n}\r\n","import { EventEmitter } from 'events'\r\nimport { Network } from '../providers'\r\n\r\nexport function subscribeToProviderEvents(\r\n  provider: EventEmitter | undefined,\r\n  onUpdate: (updatedNetwork: Partial<Network>) => void,\r\n  onDisconnect: (error: Error) => void\r\n) {\r\n  if (provider?.on) {\r\n    const onConnectListener = (info: { chainId: string } | undefined): void => {\r\n      if (info?.chainId) {\r\n        onUpdate({ chainId: Number(info.chainId) }) \r\n      }\r\n    }\r\n    provider.on('connect', onConnectListener)\r\n\r\n    const onDisconnectListener = (error: any): void => {\r\n      onDisconnect(new Error(error))\r\n    }\r\n    provider.on('disconnect', onDisconnectListener)\r\n\r\n    const onChainChangedListener = (chainId: string): void => {\r\n      onUpdate({ chainId: Number(chainId) })\r\n    }\r\n    provider.on('chainChanged', onChainChangedListener)\r\n\r\n    const onAccountsChangedListener = (accounts: string[]): void => {\r\n      onUpdate({ accounts })\r\n    }\r\n    provider.on('accountsChanged', onAccountsChangedListener)\r\n\r\n    return () => {\r\n      provider.removeListener('connect', onConnectListener)\r\n      provider.removeListener('disconnect', onDisconnectListener)\r\n      provider.removeListener('chainChanged', onChainChangedListener)\r\n      provider.removeListener('accountsChanged', onAccountsChangedListener)\r\n    }\r\n  }\r\n\r\n  return () => undefined\r\n}\r\n","import { createContext, useContext } from 'react'\r\nimport { ChainId } from '../../../constants'\r\nimport { Network } from './model'\r\nimport { ExternalProvider, JsonRpcProvider } from '@ethersproject/providers'\r\n\r\nexport const NetworkContext = createContext<{\r\n  update: (network: Partial<Network>) => void\r\n  reportError: (error: Error) => void\r\n  activate: (provider: JsonRpcProvider | ExternalProvider) => Promise<void>\r\n  deactivate: () => void\r\n  network: Network\r\n  activateBrowserWallet: () => void\r\n  isLoading: boolean\r\n}>({\r\n  network: {\r\n    provider: undefined,\r\n    chainId: ChainId.Mainnet,\r\n    accounts: [],\r\n    errors: [],\r\n  }, \r\n  update: () => undefined,\r\n  reportError: () => undefined,\r\n  activate: async () => undefined,\r\n  deactivate: () => undefined,\r\n  activateBrowserWallet: () => undefined,\r\n  isLoading: true,\r\n})\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function useNetwork() {\r\n  return useContext(NetworkContext)\r\n}\r\n","import { Actions, Network } from './model'\r\n\r\nexport const defaultNetworkState = {\r\n  provider: undefined,\r\n  chainId: undefined,\r\n  accounts: [],\r\n  errors: [],\r\n}\r\n\r\nexport function networksReducer(prevState: Network, actions: Actions): Network {\r\n  switch (actions.type) {\r\n    case 'UPDATE_NETWORK':\r\n      return {\r\n        ...prevState,\r\n        ...actions.network,\r\n      }\r\n    case 'ADD_ERROR':\r\n      return {\r\n        ...prevState,\r\n        errors: [...prevState.errors, actions.error],\r\n      }\r\n    default:\r\n      return prevState\r\n  }\r\n} \r\n","import { ReactNode, useCallback, useEffect, useReducer, useState } from 'react'\r\nimport { NetworkContext } from './context'\r\nimport { defaultNetworkState, networksReducer } from './reducer'\r\nimport { Network } from './model'\r\nimport { JsonRpcProvider, Web3Provider, ExternalProvider, Provider } from '@ethersproject/providers'\r\nimport { subscribeToProviderEvents, getInjectedProvider } from '../../../helpers'\r\nimport { useConfig } from '../../config'\r\nimport { useLocalStorage } from '../../../hooks'\r\nimport detectEthereumProvider from '@metamask/detect-provider'\r\n\r\ninterface NetworkProviderProps {\r\n  children: ReactNode\r\n  providerOverride?: JsonRpcProvider\r\n}\r\n\r\nasync function tryToGetAccount(provider: JsonRpcProvider) {\r\n  try {\r\n    return await provider.getSigner().getAddress()\r\n  } catch (err: any) {\r\n    if (err.code === 'UNSUPPORTED_OPERATION') {\r\n      // readonly provider \r\n      return undefined\r\n    }\r\n    throw err\r\n  }\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function NetworkProvider({ children, providerOverride }: NetworkProviderProps) {\r\n  const { autoConnect, pollingInterval } = useConfig()\r\n\r\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState)\r\n  const [onUnsubscribe, setOnUnsubscribe] = useState<() => void>(() => () => undefined)\r\n  const [shouldConnectMetamask, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask')\r\n  const [isLoading, setLoading] = useState(false)\r\n\r\n  const activateBrowserWallet = useCallback(async () => {\r\n    setLoading(true)\r\n    const injectedProvider = await getInjectedProvider(pollingInterval)\r\n\r\n    if (!injectedProvider) {\r\n      reportError(new Error('No injected provider available'))\r\n      setLoading(false)\r\n      return\r\n    }\r\n    try {\r\n      await injectedProvider.send('eth_requestAccounts', [])\r\n      setShouldConnectMetamask(true)\r\n    } catch (err: any) {\r\n      reportError(err)\r\n      setShouldConnectMetamask(false)\r\n      throw err\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n    return activate(injectedProvider)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (providerOverride) {\r\n      void activate(providerOverride)\r\n    }\r\n  }, [providerOverride])\r\n  const update = useCallback(\r\n    (newNetwork: Partial<Network>) => {\r\n      dispatch({ type: 'UPDATE_NETWORK', network: newNetwork })\r\n    },\r\n    [network]\r\n  )\r\n\r\n  const reportError = useCallback((error: Error) => {\r\n    console.error(error)\r\n    dispatch({ type: 'ADD_ERROR', error })\r\n  }, [])\r\n\r\n  const deactivate = useCallback(() => {\r\n    setShouldConnectMetamask(false)\r\n    update({\r\n      accounts: [],\r\n    })\r\n  }, [])\r\n\r\n  const onDisconnect = useCallback((error) => {\r\n    deactivate()\r\n    reportError(error)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setTimeout(async () => {\r\n      try {\r\n        if (shouldConnectMetamask && autoConnect && !providerOverride) {\r\n          await detectEthereumProvider()\r\n\r\n          // If window.ethereum._state.accounts is non null but has no items,\r\n          // it probably means that the user has disconnected Metamask manually.\r\n          if (shouldConnectMetamask && (window.ethereum as any)?._state?.accounts?.length === 0) {\r\n            return\r\n          }\r\n\r\n          await activateBrowserWallet()\r\n        }\r\n      } catch (err) {\r\n        console.warn(err)\r\n      }\r\n    })\r\n  }, [shouldConnectMetamask, autoConnect, providerOverride])\r\n\r\n  const activate = useCallback(\r\n    async (provider: JsonRpcProvider | ExternalProvider) => {\r\n      const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider)\r\n      try {\r\n        setLoading(true)\r\n        const account = await tryToGetAccount(wrappedProvider)\r\n        const chainId = (await wrappedProvider.getNetwork())?.chainId\r\n        onUnsubscribe()\r\n        const clearSubscriptions = subscribeToProviderEvents((wrappedProvider as any).provider, update, onDisconnect)\r\n        setOnUnsubscribe(() => clearSubscriptions)\r\n        update({\r\n          provider: wrappedProvider,\r\n          chainId,\r\n          accounts: account ? [account] : [],\r\n        })\r\n      } catch (err: any) {\r\n        reportError(err)\r\n        throw err\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    },\r\n    [onUnsubscribe]\r\n  )\r\n  return (\r\n    <NetworkContext.Provider\r\n      value={{ network, update, activate, deactivate, reportError, activateBrowserWallet, isLoading }}\r\n      children={children}\r\n    />\r\n  )\r\n}\r\n","import { createContext, useContext } from 'react'\r\nimport { Providers } from './model'\r\n\r\nexport const ReadonlyNetworksContext = createContext<Providers>({})\r\n\r\nexport function useReadonlyNetworks() {\r\n  return useContext(ReadonlyNetworksContext)\r\n}\r\n","/**\r\n * More strictly typed version of `Object.fromEntries`.\r\n * Constructs an object from key-value pairs.\r\n */\r\nexport function fromEntries<K extends string | number | symbol, V>(entries: [K, V][]): { [key in K]: V } {\r\n  return Object.fromEntries(entries) as { [key in K]: V }\r\n}\r\n","import { ReactNode, useEffect, useState } from 'react'\r\nimport { JsonRpcProvider, Provider, BaseProvider } from '@ethersproject/providers'\r\nimport { useConfig } from '../../config'\r\nimport { Providers } from './model'\r\nimport { ReadonlyNetworksContext } from './context'\r\nimport { BaseProviderFactory, NodeUrls } from '../../../constants'\r\nimport { fromEntries } from '../../../helpers/fromEntries'\r\n\r\ninterface NetworkProviderProps {\r\n  providerOverrides?: Providers\r\n  children?: ReactNode\r\n}\r\n\r\nconst getProviderFromConfig = (urlOrProviderOrProviderFunction: string | BaseProvider | BaseProviderFactory) => {\r\n  if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\r\n    return urlOrProviderOrProviderFunction\r\n  }\r\n  if (typeof urlOrProviderOrProviderFunction === 'function') {\r\n    return urlOrProviderOrProviderFunction()\r\n  }\r\n  return new JsonRpcProvider(urlOrProviderOrProviderFunction)\r\n}\r\n\r\nexport const getProvidersFromConfig = (readOnlyUrls: NodeUrls) =>\r\n  fromEntries(\r\n    Object.entries(readOnlyUrls).map(([chainId, urlOrProviderOrProviderFunction]) => [\r\n      chainId,\r\n      getProviderFromConfig(urlOrProviderOrProviderFunction),\r\n    ])\r\n  )\r\n\r\nexport function ReadonlyNetworksProvider({ providerOverrides = {}, children }: NetworkProviderProps) {\r\n  const { readOnlyUrls = {} } = useConfig()\r\n  const [providers, setProviders] = useState<Providers>(() => ({\r\n    ...getProvidersFromConfig(readOnlyUrls),\r\n    ...providerOverrides,\r\n  }))\r\n\r\n  useEffect(() => {\r\n    setProviders({ ...getProvidersFromConfig(readOnlyUrls), ...providerOverrides })\r\n  }, Object.entries(readOnlyUrls).flat())\r\n\r\n  return <ReadonlyNetworksContext.Provider value={providers}>{children}</ReadonlyNetworksContext.Provider>\r\n}\r\n","import { createContext, useContext } from 'react'\r\nimport { ChainId } from '../../../constants'\r\n\r\nexport const BlockNumbersContext = createContext<\r\n  {\r\n    [chainId in ChainId]?: number\r\n  }\r\n>({})\r\n\r\nexport function useBlockNumbers() {\r\n  return useContext(BlockNumbersContext)\r\n}\r\n","import { RawCall, ChainState } from './chainState'\r\n\r\n// NOTE: If you modify this file please ensure consistency with\r\n// packages/extension/src/providers/events/Message.ts\r\n\r\ninterface Init {\r\n  type: 'INIT'\r\n}\r\n\r\ninterface NetworkChanged {\r\n  type: 'NETWORK_CHANGED'\r\n  chainId?: number\r\n  multicallAddress?: string\r\n}\r\n\r\ninterface BlockNumberChanged {\r\n  type: 'BLOCK_NUMBER_CHANGED'\r\n  chainId: number\r\n  blockNumber: number\r\n}\r\n\r\ninterface AccountChanged {\r\n  type: 'ACCOUNT_CHANGED'\r\n  address?: string\r\n}\r\n\r\ninterface CallsChanged {\r\n  type: 'CALLS_CHANGED'\r\n  chainId?: number\r\n  calls: RawCall[]\r\n}\r\n\r\ninterface MulticallSuccess {\r\n  type: 'MULTICALL_SUCCESS'\r\n  multicallAddress: string\r\n  duration: number\r\n  chainId: number\r\n  blockNumber: number\r\n  state: ChainState\r\n}\r\n\r\ninterface MulticallError {\r\n  type: 'MULTICALL_ERROR'\r\n  multicallAddress: string\r\n  duration: number\r\n  calls: RawCall[]\r\n  chainId: number\r\n  blockNumber: number\r\n  error: any\r\n}\r\n\r\ninterface GenericError {\r\n  type: 'GENERIC_ERROR'\r\n  error: Error\r\n}\r\n\r\ntype Notification =\r\n  | Init\r\n  | NetworkChanged\r\n  | BlockNumberChanged\r\n  | AccountChanged\r\n  | CallsChanged\r\n  | MulticallSuccess\r\n  | MulticallError\r\n  | GenericError\r\n\r\nlet hook: any\r\nif (typeof window !== 'undefined') {\r\n  hook = (window as any).__USEDAPP_DEVTOOLS_HOOK__\r\n}\r\n\r\n// immediately notify devtools that the page is using it\r\nnotifyDevtools({ type: 'INIT' })\r\n\r\nexport function notifyDevtools(notification: Notification) {\r\n  if (!hook) {\r\n    return\r\n  }\r\n  if (notification.type === 'INIT') {\r\n    hook.init()\r\n  } else {\r\n    if (notification.type === 'MULTICALL_ERROR' || notification.type === 'GENERIC_ERROR') {\r\n      notification.error = getErrorMessage(notification.error)\r\n    }\r\n    hook.send(notification)\r\n  }\r\n}\r\n\r\nfunction getErrorMessage(error: unknown) {\r\n  if (error instanceof Error) {\r\n    return error.message\r\n  } else {\r\n    return '' + error\r\n  }\r\n}\r\n","import { ReactNode, useEffect, useReducer } from 'react'\r\nimport { useDebounce } from '../../../hooks'\r\nimport { useReadonlyNetworks } from '../../network'\r\nimport { BlockNumbersContext } from './context'\r\nimport { blockNumberReducer } from '../common/reducer'\r\nimport { subscribeToNewBlock } from '../common/subscribeToNewBlock'\r\n\r\ninterface Props {\r\n  children: ReactNode\r\n}\r\n\r\nexport function BlockNumbersProvider({ children }: Props) {\r\n  const networks = useReadonlyNetworks()\r\n  const [state, dispatch] = useReducer(blockNumberReducer, {})\r\n\r\n  useEffect(() => {\r\n    const onUnmount = Object.entries(networks).map(([chainId, provider]) =>\r\n      subscribeToNewBlock(provider, Number(chainId), dispatch)\r\n    )\r\n\r\n    return () => {\r\n      onUnmount.forEach((fn) => fn())\r\n    }\r\n  }, [networks])\r\n\r\n  const debouncedState = useDebounce(state, 100)\r\n\r\n  return <BlockNumbersContext.Provider value={debouncedState} children={children} />\r\n}\r\n","import { ChainId } from '../../..'\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport type Action = AddCall | RemoveCall | UpdateCall\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface RawCall {\r\n  chainId: ChainId\r\n  address: string\r\n  data: string\r\n  isStatic?: boolean\r\n  isDisabled?: boolean\r\n}\r\n\r\n/**\r\n * @deprecated It's recommended to use RawCall instead\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport interface ChainCall {\r\n  chainId?: ChainId\r\n  address: string\r\n  data: string\r\n}\r\n\r\ninterface AddCall {\r\n  type: 'ADD_CALLS'\r\n  calls: RawCall[]\r\n}\r\n\r\ninterface UpdateCall {\r\n  type: 'UPDATE_CALLS'\r\n  calls: RawCall[]\r\n}\r\n\r\ninterface RemoveCall {\r\n  type: 'REMOVE_CALLS'\r\n  calls: RawCall[]\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function callsReducer(state: RawCall[] = [], action: Action) {\r\n  if (action.type === 'ADD_CALLS') {\r\n    return [...state, ...action.calls.map((call) => ({ ...call, address: call.address.toLowerCase() }))]\r\n  } else if (action.type === 'UPDATE_CALLS') {\r\n    return state.map((call) =>\r\n      call.isStatic\r\n        ? {\r\n            ...call,\r\n            isDisabled: true,\r\n          }\r\n        : call\r\n    )\r\n  } else {\r\n    let finalState = state\r\n    for (const call of action.calls) {\r\n      const index = finalState.findIndex(\r\n        (x) => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data\r\n      )\r\n      if (index !== -1) {\r\n        finalState = finalState.filter((_, i) => i !== index)\r\n      }\r\n    }\r\n    return finalState\r\n  }\r\n}\r\n","import { ChainState } from './model'\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface State {\r\n  [chainId: number]:\r\n    | {\r\n        blockNumber: number\r\n        state?: ChainState\r\n        error?: unknown\r\n      }\r\n    | undefined\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport type ChainStateAction = FetchSuccess | FetchError\r\n\r\ninterface FetchSuccess {\r\n  type: 'FETCH_SUCCESS'\r\n  chainId: number\r\n  blockNumber: number\r\n  state: ChainState\r\n}\r\n\r\ninterface FetchError {\r\n  type: 'FETCH_ERROR'\r\n  chainId: number\r\n  blockNumber: number\r\n  error: unknown\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function chainStateReducer(state: State = {}, action: ChainStateAction) {\r\n  const current = state[action.chainId]?.blockNumber\r\n  if (!current || action.blockNumber >= current) {\r\n    if (action.type === 'FETCH_SUCCESS') {\r\n      let newState = action.state\r\n      if (action.blockNumber === current) {\r\n        // merge with existing state to prevent requests coming out of order\r\n        // from overwriting the data\r\n        const oldState = state[action.chainId]?.state ?? {}\r\n        for (const [address, entries] of Object.entries(oldState)) {\r\n          newState = {\r\n            ...newState,\r\n            [address]: {\r\n              ...entries,\r\n              ...newState[address],\r\n            },\r\n          }\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        [action.chainId]: { blockNumber: action.blockNumber, state: newState },\r\n      }\r\n    } else if (action.type === 'FETCH_ERROR') {\r\n      return {\r\n        ...state,\r\n        [action.chainId]: { ...state[action.chainId], blockNumber: action.blockNumber, error: action.error },\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { Provider } from '@ethersproject/providers'\r\nimport { RawCall } from './callsReducer'\r\nimport { ChainState } from './model'\r\n\r\nconst ABI = [\r\n  'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\r\n]\r\n\r\n/**\r\n * @public\r\n */\r\nexport async function multicall(\r\n  provider: Provider,\r\n  address: string,\r\n  blockNumber: number,\r\n  requests: RawCall[]\r\n): Promise<ChainState> {\r\n  if (requests.length === 0) {\r\n    return {}\r\n  }\r\n  const contract = new Contract(address, ABI, provider)\r\n  const [, results]: [BigNumber, string[]] = await contract.aggregate(\r\n    requests.map(({ address, data }) => [address, data]),\r\n    { blockTag: blockNumber }\r\n  )\r\n  const state: ChainState = {}\r\n  for (let i = 0; i < requests.length; i++) {\r\n    const { address, data } = requests[i]\r\n    const result = results[i]\r\n    const stateForAddress = state[address] ?? {}\r\n    stateForAddress[data] = { value: result, success: true }\r\n    state[address] = stateForAddress\r\n  }\r\n  return state\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { Provider } from '@ethersproject/providers'\r\nimport { RawCall } from './callsReducer'\r\nimport { ChainState } from './model'\r\n\r\nconst ABI = [\r\n  'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])',\r\n]\r\n\r\n/**\r\n * @public\r\n */\r\nexport async function multicall2(\r\n  provider: Provider,\r\n  address: string,\r\n  blockNumber: number,\r\n  requests: RawCall[]\r\n): Promise<ChainState> {\r\n  if (requests.length === 0) {\r\n    return {}\r\n  }\r\n  const contract = new Contract(address, ABI, provider)\r\n  const results: [boolean, string][] = await contract.tryAggregate(\r\n    false,\r\n    requests.map(({ address, data }) => [address, data]),\r\n    { blockTag: blockNumber }\r\n  )\r\n  const state: ChainState = {}\r\n  for (let i = 0; i < requests.length; i++) {\r\n    const { address, data } = requests[i]\r\n    const [success, value] = results[i]\r\n    const stateForAddress = state[address] ?? {}\r\n    stateForAddress[data] = { success, value }\r\n    state[address] = stateForAddress\r\n  }\r\n  return state\r\n}\r\n","import { QueryParams } from '../constants/type/QueryParams'\r\nimport { useConfig, useNetwork } from '../providers'\r\n\r\nexport interface UseChainIdOptions {\r\n  queryParams?: QueryParams\r\n}\r\n\r\n/**\r\n * Internal hook for reading current chainId for calls.\r\n * @internal\r\n */\r\nexport function useChainId(opts: UseChainIdOptions = {}) {\r\n  const { network } = useNetwork()\r\n  const { readOnlyChainId } = useConfig() \r\n  return opts?.queryParams?.chainId ?? network.chainId ?? readOnlyChainId\r\n}\r\n","import { ReactNode, useEffect, useMemo, useReducer } from 'react'\r\nimport { useDebouncePair } from '../../../hooks'\r\nimport { MultiChainStatesContext } from './context'\r\nimport { ChainId, multicall as multicall1, multicall2, State, useConfig, useNetwork } from '../../..'\r\nimport { useReadonlyNetworks } from '../../network'\r\nimport { useBlockNumbers } from '../../blockNumber/blockNumbers'\r\nimport { fromEntries } from '../../../helpers/fromEntries'\r\nimport { performMulticall } from '../common/performMulticall'\r\nimport { Providers } from '../../network/readonlyNetworks/model'\r\nimport { BaseProvider } from '@ethersproject/providers'\r\nimport { callsReducer, chainStateReducer } from '../common'\r\nimport { getUniqueActiveCalls } from '../../../helpers'\r\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting'\r\nimport { useChainId } from '../../../hooks/useChainId'\r\n\r\ninterface Props {\r\n  children: ReactNode\r\n  multicallAddresses: {\r\n    [chainId: number]: string\r\n  }\r\n}\r\n\r\nfunction composeChainState(networks: Providers, state: State, multicallAddresses: Props['multicallAddresses']) {\r\n  return fromEntries(\r\n    Object.keys(networks).map((chainId) => [\r\n      Number(chainId),\r\n      {\r\n        value: state[Number(chainId)],\r\n        multicallAddress: multicallAddresses[Number(chainId)],\r\n      },\r\n    ])\r\n  )\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function MultiChainStateProvider({ children, multicallAddresses }: Props) {\r\n  const { multicallVersion } = useConfig()\r\n  const networks = useReadonlyNetworks()\r\n  const blockNumbers = useBlockNumbers()\r\n  const { reportError } = useNetwork()\r\n\r\n  const [calls, dispatchCalls] = useReducer(callsReducer, [])\r\n  const [state, dispatchState] = useReducer(chainStateReducer, {})\r\n\r\n  const multicall = multicallVersion === 1 ? multicall1 : multicall2\r\n\r\n  const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50)\r\n  const uniqueCalls = useMemo(() => getUniqueActiveCalls(debouncedCalls), [debouncedCalls])\r\n\r\n  // used for deep equality in hook dependencies\r\n  const uniqueCallsJSON = JSON.stringify(debouncedCalls)\r\n\r\n  const chainId = useChainId()\r\n  useDevtoolsReporting(\r\n    uniqueCallsJSON,\r\n    uniqueCalls,\r\n    chainId !== undefined ? blockNumbers[chainId as ChainId] : undefined,\r\n    multicallAddresses\r\n  )\r\n\r\n  function multicallForChain(chainId: ChainId, provider?: BaseProvider) {\r\n    const blockNumber = blockNumbers[chainId]\r\n    const multicallAddress = multicallAddresses[chainId]\r\n\r\n    if (!provider || !blockNumber) {\r\n      return\r\n    }\r\n    if (!multicallAddress) {\r\n      reportError(new Error(`Missing multicall address for chain id ${chainId}`))\r\n      return\r\n    }\r\n    if (debouncedNetworks !== networks) {\r\n      // Wait for debounce to catch up.\r\n      return\r\n    }\r\n\r\n    const callsOnThisChain = uniqueCalls.filter((call) => call.chainId === chainId)\r\n    if (callsOnThisChain.length === 0) {\r\n      return\r\n    }\r\n    performMulticall(\r\n      provider,\r\n      multicall,\r\n      multicallAddress,\r\n      blockNumber,\r\n      callsOnThisChain,\r\n      dispatchState,\r\n      chainId,\r\n      reportError\r\n    )\r\n    dispatchCalls({ type: 'UPDATE_CALLS', calls })\r\n  }\r\n\r\n  useEffect(() => {\r\n    for (const [_chainId, provider] of Object.entries(networks)) {\r\n      multicallForChain(Number(_chainId), provider)\r\n    }\r\n  }, [blockNumbers, networks, multicallAddresses, uniqueCallsJSON])\r\n\r\n  const chains = useMemo(() => composeChainState(networks, state, multicallAddresses), [\r\n    state,\r\n    multicallAddresses,\r\n    networks,\r\n  ])\r\n\r\n  const provided = { chains, dispatchCalls }\r\n\r\n  return <MultiChainStatesContext.Provider value={provided} children={children} />\r\n}\r\n","import { BaseProvider } from '@ethersproject/providers'\r\nimport { RawCall } from './callsReducer'\r\nimport { Dispatch } from 'react'\r\nimport { ChainStateAction } from './chainStateReducer'\r\nimport { ChainId } from '../../../constants'\r\nimport { notifyDevtools } from '../../devtools'\r\n\r\nexport function performMulticall(\r\n  provider: BaseProvider,\r\n  multicallExecutor: (\r\n    provider: BaseProvider,\r\n    multicallAddress: string,\r\n    blockNumber: number,\r\n    uniqueCalls: RawCall[]\r\n  ) => Promise<any>,\r\n  multicallAddress: string,\r\n  blockNumber: number,\r\n  uniqueCalls: RawCall[],\r\n  dispatchState: Dispatch<ChainStateAction>,\r\n  chainId: ChainId,\r\n  reportError: (error: Error) => void\r\n) {\r\n  const start = Date.now()\r\n  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls)\r\n    .then((state) => {\r\n      dispatchState({ type: 'FETCH_SUCCESS', blockNumber, chainId, state })\r\n      notifyDevtools({\r\n        type: 'MULTICALL_SUCCESS',\r\n        duration: Date.now() - start,\r\n        chainId,\r\n        blockNumber,\r\n        multicallAddress,\r\n        state,\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      reportError(error)\r\n      dispatchState({ type: 'FETCH_ERROR', blockNumber, chainId, error })\r\n      notifyDevtools({\r\n        type: 'MULTICALL_ERROR',\r\n        duration: Date.now() - start,\r\n        chainId,\r\n        blockNumber,\r\n        multicallAddress,\r\n        calls: uniqueCalls,\r\n        error,\r\n      })\r\n    })\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useEthers } from '../../../hooks'\r\nimport { notifyDevtools } from '../../devtools'\r\nimport { RawCall } from './callsReducer'\r\n\r\nexport function useDevtoolsReporting(\r\n  uniqueCallsJSON: string,\r\n  uniqueCalls: RawCall[],\r\n  blockNumber: number | undefined,\r\n  multicallAddresses: { [network: string]: string }\r\n) {\r\n  const { chainId, account, error } = useEthers()\r\n\r\n  const multicall = chainId !== undefined ? multicallAddresses[chainId] : undefined\r\n\r\n  useEffect(() => {\r\n    notifyDevtools({ type: 'NETWORK_CHANGED', chainId, multicallAddress: multicall })\r\n  }, [chainId, multicall])\r\n\r\n  useEffect(() => {\r\n    notifyDevtools({ type: 'ACCOUNT_CHANGED', address: account ?? undefined })\r\n  }, [account])\r\n\r\n  useEffect(() => {\r\n    notifyDevtools({ type: 'CALLS_CHANGED', chainId, calls: uniqueCalls })\r\n  }, [uniqueCallsJSON])\r\n\r\n  useEffect(() => {\r\n    if (chainId !== undefined && blockNumber !== undefined) {\r\n      notifyDevtools({ type: 'BLOCK_NUMBER_CHANGED', chainId, blockNumber })\r\n    }\r\n  }, [blockNumber, chainId])\r\n\r\n  useEffect(() => {\r\n    if (error !== undefined) {\r\n      notifyDevtools({ type: 'GENERIC_ERROR', error })\r\n    }\r\n  }, [error])\r\n}\r\n","import { TransactionReceipt, TransactionResponse } from '@ethersproject/abstract-provider'\r\n\r\ntype NotificationPayload = { submittedAt: number } & (\r\n  | { type: 'transactionStarted'; transaction: TransactionResponse; transactionName?: string }\r\n  | {\r\n      type: 'transactionSucceed'\r\n      transaction: TransactionResponse\r\n      receipt: TransactionReceipt\r\n      transactionName?: string\r\n      originalTransaction?: TransactionResponse\r\n    }\r\n  | {\r\n      type: 'transactionFailed'\r\n      transaction: TransactionResponse\r\n      receipt: TransactionReceipt\r\n      transactionName?: string\r\n      originalTransaction?: TransactionResponse\r\n    }\r\n  | { type: 'walletConnected'; address: string }\r\n)\r\n\r\n/**\r\n * @public\r\n */\r\nexport type Notification = { id: string } & NotificationPayload\r\n\r\n/**\r\n * @public\r\n */\r\nexport type AddNotificationPayload = {\r\n  chainId: number\r\n  notification: NotificationPayload\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport type RemoveNotificationPayload = {\r\n  chainId: number\r\n  notificationId: string\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport type Notifications = {\r\n  [chainID: number]: Notification[]\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport const DEFAULT_NOTIFICATIONS: Notifications = {}\r\n","import { createContext, useContext } from 'react'\r\nimport { Notifications, DEFAULT_NOTIFICATIONS, AddNotificationPayload, RemoveNotificationPayload } from './model'\r\n\r\nexport const NotificationsContext = createContext<{\r\n  notifications: Notifications\r\n  addNotification: (payload: AddNotificationPayload) => void\r\n  removeNotification: (payload: RemoveNotificationPayload) => void\r\n}>({\r\n  notifications: DEFAULT_NOTIFICATIONS,\r\n  addNotification: () => undefined,\r\n  removeNotification: () => undefined,\r\n})\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function useNotificationsContext() {\r\n  return useContext(NotificationsContext)\r\n}\r\n","import { Notification, Notifications } from './model'\r\n\r\ninterface AddNotification {\r\n  type: 'ADD_NOTIFICATION'\r\n  chainId: number\r\n  notification: Notification\r\n}\r\n\r\ninterface RemoveNotification {\r\n  type: 'REMOVE_NOTIFICATION'\r\n  chainId: number\r\n  notificationId: string\r\n}\r\n\r\ntype Action = AddNotification | RemoveNotification\r\n\r\nexport function notificationReducer(state: Notifications, action: Action): Notifications {\r\n  const { chainId } = action\r\n  const chainState = state[chainId] ?? []\r\n\r\n  switch (action.type) {\r\n    case 'ADD_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        [chainId]: [action.notification, ...chainState],\r\n      }\r\n    case 'REMOVE_NOTIFICATION': {\r\n      return {\r\n        ...state,\r\n        [chainId]: chainState.filter((notification) => notification.id !== action.notificationId),\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { ReactNode, useCallback, useEffect, useReducer } from 'react'\r\nimport { useEthers } from '../../hooks'\r\nimport { NotificationsContext } from './context'\r\nimport { AddNotificationPayload, DEFAULT_NOTIFICATIONS, RemoveNotificationPayload } from './model'\r\nimport { notificationReducer } from './reducer'\r\nimport { nanoid } from 'nanoid'\r\n\r\ninterface Props {\r\n  children: ReactNode\r\n}\r\n\r\nexport function NotificationsProvider({ children }: Props) {\r\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS)\r\n  const { chainId, account } = useEthers()\r\n\r\n  useEffect(() => {\r\n    if (account && chainId) {\r\n      dispatch({\r\n        type: 'ADD_NOTIFICATION',\r\n        chainId: chainId,\r\n        notification: {\r\n          type: 'walletConnected',\r\n          id: nanoid(),\r\n          submittedAt: Date.now(),\r\n          address: account,\r\n        },\r\n      })\r\n    }\r\n  }, [account, chainId])\r\n\r\n  const addNotification = useCallback(\r\n    ({ notification, chainId }: AddNotificationPayload) => {\r\n      dispatch({\r\n        type: 'ADD_NOTIFICATION',\r\n        chainId,\r\n        notification: { ...notification, id: nanoid() },\r\n      })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const removeNotification = useCallback(\r\n    ({ notificationId, chainId }: RemoveNotificationPayload) => {\r\n      dispatch({\r\n        type: 'REMOVE_NOTIFICATION',\r\n        chainId,\r\n        notificationId,\r\n      })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return (\r\n    <NotificationsContext.Provider value={{ addNotification, notifications, removeNotification }} children={children} />\r\n  )\r\n}\r\n","import { TransactionReceipt, TransactionResponse } from '@ethersproject/providers'\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface StoredTransaction {\r\n  transaction: TransactionResponse\r\n  submittedAt: number\r\n  receipt?: TransactionReceipt\r\n  lastCheckedBlockNumber?: number\r\n  transactionName?: string\r\n  originalTransaction?: TransactionResponse\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function getStoredTransactionState(transaction: StoredTransaction) {\r\n  if (transaction.receipt) {\r\n    return transaction.receipt.status === 0 ? 'Fail' : 'Success'\r\n  }\r\n  return 'Mining'\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport type StoredTransactions = {\r\n  [chainID: number]: StoredTransaction[]\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport const DEFAULT_STORED_TRANSACTIONS: StoredTransactions = {}\r\n","import { ReactNode, useEffect, useState } from 'react'\r\nimport { getChainById } from '../helpers'\r\nimport { useEthers } from '../hooks'\r\nimport { useBlockNumber } from './blockNumber/blockNumber'\r\nimport { useConfig, useUpdateConfig } from './config'\r\nimport multicallABI from '../constants/abi/MultiCall.json'\r\nimport { deployContract } from '../helpers/contract'\r\n\r\ninterface LocalMulticallProps {\r\n  children: ReactNode\r\n}\r\n\r\nenum LocalMulticallState {\r\n  Unknown,\r\n  NonLocal,\r\n  Deploying,\r\n  Deployed,\r\n  Error,\r\n}\r\n\r\nexport function LocalMulticallProvider({ children }: LocalMulticallProps) {\r\n  const updateConfig = useUpdateConfig()\r\n  const { multicallAddresses } = useConfig()\r\n  const { library, chainId } = useEthers()\r\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown)\r\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState<number>()\r\n  const blockNumber = useBlockNumber()\r\n\r\n  useEffect(() => {\r\n    if (!library || !chainId) {\r\n      setLocalMulticallState(LocalMulticallState.Unknown)\r\n    } else if (!getChainById(chainId)?.isLocalChain) {\r\n      setLocalMulticallState(LocalMulticallState.NonLocal)\r\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\r\n      setLocalMulticallState(LocalMulticallState.Deployed)\r\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\r\n      const signer = library.getSigner()\r\n      if (!signer) {\r\n        setLocalMulticallState(LocalMulticallState.Error)\r\n        return\r\n      }\r\n\r\n      setLocalMulticallState(LocalMulticallState.Deploying)\r\n\r\n      const deployMulticall = async () => {\r\n        try {\r\n          const { contractAddress, blockNumber } = await deployContract(multicallABI, signer)\r\n          updateConfig({ multicallAddresses: { [chainId]: contractAddress } })\r\n          setMulticallBlockNumber(blockNumber)\r\n          setLocalMulticallState(LocalMulticallState.Deployed)\r\n        } catch {\r\n          setLocalMulticallState(LocalMulticallState.Error)\r\n        }\r\n      }\r\n      void deployMulticall()\r\n    }\r\n  }, [library, chainId])\r\n\r\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber\r\n\r\n  if (\r\n    localMulticallState === LocalMulticallState.Deploying ||\r\n    (localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock)\r\n  ) {\r\n    return <div>Deploying multicall...</div>\r\n  } else if (localMulticallState === LocalMulticallState.Error) {\r\n    return <div>Error deploying multicall contract</div>\r\n  } else {\r\n    return <>{children}</>\r\n  }\r\n}\r\n","import { createContext, useContext } from 'react'\r\nimport { DEFAULT_STORED_TRANSACTIONS, StoredTransaction, StoredTransactions } from './model'\r\n\r\nexport const TransactionsContext = createContext<{\r\n  transactions: StoredTransactions\r\n  addTransaction: (payload: StoredTransaction) => void\r\n}>({\r\n  transactions: DEFAULT_STORED_TRANSACTIONS,\r\n  addTransaction: () => undefined,\r\n})\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function useTransactionsContext() {\r\n  return useContext(TransactionsContext)\r\n}\r\n","import { StoredTransaction, StoredTransactions } from './model'\r\n\r\ntype Action = AddTransaction | UpdateTransactions\r\n\r\ninterface AddTransaction {\r\n  type: 'ADD_TRANSACTION'\r\n  payload: StoredTransaction\r\n}\r\ninterface UpdateTransactions {\r\n  type: 'UPDATE_TRANSACTIONS'\r\n  chainId: number\r\n  transactions: StoredTransaction[]\r\n}\r\n\r\nexport function transactionReducer(state: StoredTransactions, action: Action): StoredTransactions {\r\n  switch (action.type) {\r\n    case 'ADD_TRANSACTION': {\r\n      const { chainId } = action.payload.transaction\r\n      return {\r\n        ...state,\r\n        [chainId]: [action.payload, ...(state[chainId] ?? [])],\r\n      }\r\n    }\r\n    case 'UPDATE_TRANSACTIONS':\r\n      return { ...state, [action.chainId]: [...action.transactions] }\r\n  }\r\n}\r\n","import { ReactNode, useCallback, useEffect, useReducer } from 'react'\r\nimport { useEthers, useLocalStorage } from '../../hooks'\r\nimport { useBlockNumber } from '../blockNumber/blockNumber'\r\nimport { useNotificationsContext } from '../notifications/context'\r\nimport { TransactionsContext } from './context'\r\nimport { DEFAULT_STORED_TRANSACTIONS, StoredTransaction } from './model'\r\nimport { transactionReducer } from './reducer'\r\nimport { useConfig } from '../config'\r\n\r\ninterface Props {\r\n  children: ReactNode\r\n}\r\n\r\nexport function TransactionProvider({ children }: Props) {\r\n  const { chainId, library } = useEthers()\r\n  const blockNumber = useBlockNumber()\r\n  const { localStorage } = useConfig()\r\n  const [storage, setStorage] = useLocalStorage(localStorage.transactionPath)\r\n  const [transactions, dispatch] = useReducer(transactionReducer, storage ?? DEFAULT_STORED_TRANSACTIONS)\r\n  const { addNotification } = useNotificationsContext()\r\n\r\n  useEffect(() => {\r\n    setStorage(transactions)\r\n  }, [transactions])\r\n\r\n  const addTransaction = useCallback(\r\n    (payload: StoredTransaction) => {\r\n      dispatch({\r\n        type: 'ADD_TRANSACTION',\r\n        payload,\r\n      })\r\n      addNotification({\r\n        notification: {\r\n          type: 'transactionStarted',\r\n          transaction: payload.transaction,\r\n          submittedAt: payload.submittedAt,\r\n          transactionName: payload.transactionName,\r\n        },\r\n        chainId: payload.transaction.chainId,\r\n      })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  useEffect(() => {\r\n    const updateTransactions = async () => {\r\n      if (!chainId || !library || !blockNumber) {\r\n        return\r\n      }\r\n\r\n      const checkTransaction = async (tx: StoredTransaction) => {\r\n        if (tx.receipt || !shouldCheck(blockNumber, tx)) {\r\n          return tx\r\n        }\r\n\r\n        try {\r\n          const receipt = await library.getTransactionReceipt(tx.transaction.hash)\r\n          if (receipt) {\r\n            const type = receipt.status === 0 ? 'transactionFailed' : 'transactionSucceed'\r\n            addNotification({\r\n              notification: {\r\n                type,\r\n                submittedAt: Date.now(),\r\n                transaction: tx.transaction,\r\n                receipt,\r\n                transactionName: tx.transactionName,\r\n              },\r\n              chainId,\r\n            })\r\n\r\n            return { ...tx, receipt }\r\n          } else {\r\n            return { ...tx, lastCheckedBlockNumber: blockNumber }\r\n          }\r\n        } catch (error) {\r\n          console.error(`failed to check transaction hash: ${tx.transaction.hash}`, error)\r\n        }\r\n\r\n        return tx\r\n      }\r\n\r\n      const chainTransactions = transactions[chainId] ?? []\r\n      const newTransactions: StoredTransaction[] = []\r\n      for (const tx of chainTransactions) {\r\n        const newTransaction = await checkTransaction(tx)\r\n        newTransactions.push(newTransaction)\r\n      }\r\n\r\n      dispatch({ type: 'UPDATE_TRANSACTIONS', chainId, transactions: newTransactions })\r\n    }\r\n\r\n    void updateTransactions()\r\n  }, [chainId, library, blockNumber])\r\n\r\n  return <TransactionsContext.Provider value={{ transactions, addTransaction }} children={children} />\r\n}\r\n\r\nfunction shouldCheck(blockNumber: number, tx: StoredTransaction): boolean {\r\n  if (tx.receipt) {\r\n    return false\r\n  }\r\n\r\n  if (!tx.lastCheckedBlockNumber) {\r\n    return true\r\n  }\r\n\r\n  const blocksSinceCheck = blockNumber - tx.lastCheckedBlockNumber\r\n  if (blocksSinceCheck < 1) {\r\n    return false\r\n  }\r\n\r\n  const minutesPending = (Date.now() - tx.submittedAt) / 1000 / 60\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9\r\n  }\r\n\r\n  if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2\r\n  }\r\n\r\n  // otherwise every block\r\n  return true\r\n}\r\n","import { ContractFactory, ethers } from 'ethers'\r\n\r\ninterface ContractAbi {\r\n  abi: ethers.ContractInterface\r\n  bytecode: ethers.utils.BytesLike\r\n}\r\n\r\nexport async function deployContract(\r\n  contractAbi: ContractAbi,\r\n  signer: ethers.providers.JsonRpcSigner\r\n): Promise<ethers.providers.TransactionReceipt> {\r\n  const factory = new ContractFactory(contractAbi.abi, contractAbi.bytecode, signer)\r\n  const contract = await factory.deploy()\r\n  return await contract.deployTransaction.wait()\r\n}\r\n","import { ReactNode, useMemo } from 'react'\r\nimport { Config, Chain } from '../constants'\r\nimport { ConfigProvider } from './config'\r\nimport { BlockNumberProvider } from './blockNumber/blockNumber'\r\nimport { MultiChainStateProvider } from './chainState'\r\nimport { useConfig } from './config/context'\r\nimport { NotificationsProvider } from './notifications/provider'\r\nimport { TransactionProvider } from './transactions/provider'\r\nimport { LocalMulticallProvider } from './LocalMulticallProvider'\r\nimport { NetworkProvider, ReadonlyNetworksProvider } from './network'\r\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers'\r\n\r\nexport interface DAppProviderProps {\r\n  children?: ReactNode\r\n  /**\r\n   * Configuration of the DApp. See {@link Config} for more details.\r\n   */\r\n  config: Config\r\n}\r\n\r\n/**\r\n * Provides basic services for a DApp.\r\n * @public\r\n */\r\nexport function DAppProvider({ config, children }: DAppProviderProps) {\r\n  return (\r\n    <ConfigProvider config={config}>\r\n      <DAppProviderWithConfig>{children}</DAppProviderWithConfig>\r\n    </ConfigProvider>\r\n  )\r\n}\r\n\r\ninterface WithConfigProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst getMulticallAddresses = (networks: Chain[] | undefined) => {\r\n  const result: { [index: number]: string } = {}\r\n  networks?.forEach((network) => (result[network.chainId] = network.multicallAddress))\r\n  return result\r\n}\r\n\r\nconst getMulticall2Addresses = (networks: Chain[] | undefined) => {\r\n  const result: { [index: number]: string } = {}\r\n  networks?.forEach((network) => {\r\n    if (network.multicall2Address) {\r\n      result[network.chainId] = network.multicall2Address\r\n    }\r\n  })\r\n  return result\r\n}\r\n\r\nfunction DAppProviderWithConfig({ children }: WithConfigProps) {\r\n  const { multicallAddresses, networks, multicallVersion } = useConfig()\r\n  const defaultAddresses = useMemo(\r\n    () => (multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks)),\r\n    [networks, multicallVersion]\r\n  )\r\n  const multicallAddressesMerged = { ...defaultAddresses, ...multicallAddresses }\r\n\r\n  return (\r\n    <ReadonlyNetworksProvider>\r\n      <NetworkProvider>\r\n        <BlockNumberProvider>\r\n          <BlockNumbersProvider>\r\n            <LocalMulticallProvider>\r\n              <MultiChainStateProvider multicallAddresses={multicallAddressesMerged}>\r\n                <NotificationsProvider>\r\n                  <TransactionProvider>{children}</TransactionProvider>\r\n                </NotificationsProvider>\r\n              </MultiChainStateProvider>\r\n            </LocalMulticallProvider>\r\n          </BlockNumbersProvider>\r\n        </BlockNumberProvider>\r\n      </NetworkProvider>\r\n    </ReadonlyNetworksProvider>\r\n  )\r\n}\r\n","import { useContext } from 'react'\r\nimport { QueryParams } from '../constants/type/QueryParams'\r\nimport { Action, MultiChainStatesContext, SingleChainState } from '../providers'\r\nimport { useChainId } from './useChainId'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useChainState(\r\n  queryParams: QueryParams = {}\r\n): (Partial<SingleChainState> & { dispatchCalls: (action: Action) => void }) | undefined {\r\n  const multiChainState = useContext(MultiChainStatesContext)\r\n  const chainId = useChainId({ queryParams })\r\n\r\n  if (chainId === undefined) {\r\n    return undefined\r\n  }\r\n\r\n  return {\r\n    ...multiChainState.chains[chainId],\r\n    dispatchCalls: multiChainState.dispatchCalls,\r\n  }\r\n}\r\n","import { QueryParams } from '../constants/type/QueryParams'\r\nimport { useChainState } from './useChainState'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useMulticallAddress(queryParams: QueryParams = {}): string | undefined {\r\n  return useChainState(queryParams)?.multicallAddress\r\n}\r\n","import { useContext, useEffect, useMemo } from 'react'\r\nimport { MultiChainStatesContext, RawCallResult } from '../providers'\r\nimport { RawCall } from '../providers'\r\nimport { Falsy } from '../model/types'\r\nimport { MultiChainState } from '../providers/chainState/multiChainStates/context'\r\n\r\n/**\r\n * A low-level function that makes multiple calls to specific methods of specific contracts and returns values or error if present.\r\n * The hook will cause the component to refresh when values change.\r\n *\r\n * Calls will be combined into a single multicall across all uses of useChainCall, useChainCalls, useRawCall and useRawCalls.\r\n * It is recommended to use useCalls where applicable instead of this method.\r\n * @param calls List of calls, also see {@link ChainCall}. Calls need to be in the same order across component renders.\r\n * @returns\r\n */\r\nexport function useRawCalls(calls: (RawCall | Falsy)[]): RawCallResult[] {\r\n  const { dispatchCalls, chains } = useContext(MultiChainStatesContext)\r\n\r\n  useEffect(() => {\r\n    const filteredCalls = calls.filter(Boolean) as RawCall[]\r\n    dispatchCalls({ type: 'ADD_CALLS', calls: filteredCalls })\r\n    return () => dispatchCalls({ type: 'REMOVE_CALLS', calls: filteredCalls })\r\n  }, [JSON.stringify(calls), dispatchCalls])\r\n\r\n  return useMemo(\r\n    () =>\r\n      calls.map((call) => {\r\n        return call ? extractCallResult(chains, call) : undefined\r\n      }),\r\n    [JSON.stringify(calls), chains]\r\n  )\r\n}\r\n\r\n/**\r\n * A low-level function that makes a call to a specific method of a specific contract and returns the value or error if present.\r\n * The hook will cause the component to refresh whenever a new block is mined and the value is changed.\r\n *\r\n * Calls will be combined into a single multicall across all uses of useChainCall, useChainCalls, useRawCall and useRawCalls.\r\n * It is recommended to use useCall where applicable instead of this method.\r\n *\r\n * @param call a single call, also see {@link RawCall}.\r\n *             A call can be Falsy, as it is important to keep the same ordering of hooks even if in a given render cycle\r\n *             and there might be not enough information to perform a call.\r\n * @returns result of multicall call.\r\n */\r\nexport function useRawCall(call: RawCall | Falsy) {\r\n  return useRawCalls([call])[0]\r\n}\r\n\r\nfunction extractCallResult(chains: MultiChainState, call: RawCall): RawCallResult {\r\n  const chainId = call.chainId\r\n  return chainId !== undefined ? chains[chainId]?.value?.state?.[call.address.toLowerCase()]?.[call.data] : undefined\r\n}\r\n","import { MultiCallABI } from '../constants'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { useMulticallAddress } from './useMulticallAddress'\r\nimport { QueryParams } from '../constants/type/QueryParams'\r\nimport { useRawCall } from './useRawCalls'\r\nimport { useChainId } from './useChainId'\r\n\r\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', [])\r\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', [])\r\n\r\n/**\r\n * Queries block metadata.\r\n * @public\r\n */\r\nexport function useBlockMeta(queryParams: QueryParams = {}) {\r\n  const chainId = useChainId({ queryParams })\r\n\r\n  const address = useMulticallAddress(queryParams)\r\n  const timestamp = useRawCall(\r\n    address && chainId !== undefined && { address, data: GET_CURRENT_BLOCK_TIMESTAMP_CALL, chainId }\r\n  )\r\n  const difficulty = useRawCall(\r\n    address && chainId !== undefined && { address, data: GET_CURRENT_BLOCK_DIFFICULTY_CALL, chainId }\r\n  )\r\n\r\n  return {\r\n    timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\r\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\r\n  }\r\n}\r\n","import { RawCall } from '../providers'\r\nimport { Falsy } from '../model/types'\r\nimport { useRawCalls } from './useRawCalls'\r\n\r\n/**\r\n * @public\r\n * @deprecated It's recommended to use useRawCalls instead\r\n */\r\nexport function useChainCalls(calls: (RawCall | Falsy)[]) {\r\n  const results = useRawCalls(calls)\r\n  return results.map((result) => result?.value)\r\n}\r\n\r\n/**\r\n * @public\r\n * @deprecated It's recommended to use useRawCall instead\r\n */\r\nexport function useChainCall(call: RawCall | Falsy) {\r\n  return useChainCalls([call])[0]\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value)\r\n    }, delay)\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler)\r\n    }\r\n  }, [value, delay])\r\n\r\n  return debouncedValue\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function useDebouncePair<T, U>(first: T, second: U, delay: number): [T, U] {\r\n  const [debouncedValue, setDebouncedValue] = useState<[T, U]>([first, second])\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue([first, second])\r\n    }, delay)\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler)\r\n    }\r\n  }, [first, second, delay])\r\n\r\n  return debouncedValue\r\n}\r\n","export type Assertions<S extends Record<string, unknown>> = { [K in keyof S]: string }\r\n\r\nexport function validateArguments<S extends Record<string, unknown>>(args: S, assertions: Assertions<S>): void {\r\n  for (const key of Object.getOwnPropertyNames(args) as (keyof S)[]) {\r\n    if (typeof args[key] !== assertions[key]) {\r\n      throw new Error(`Expected \"${key}\" to be of type \"${assertions[key]}\", got \"${args[key]}\" instead.`)\r\n    }\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport { useReadonlyNetworks } from '../providers/network'\r\nimport { useChainId } from './useChainId'\r\nimport type { BaseProvider } from '@ethersproject/providers'\r\n\r\nexport interface UseReadonlyProviderOptions {\r\n  chainId?: number\r\n}\r\n\r\nexport interface ReadonlyNetwork {\r\n  provider: BaseProvider\r\n  chainId: number\r\n}\r\n\r\n/**\r\n * Gets a readonly provider for specific chainId.\r\n * @param opts.chainId Requested chainId. If not provided, the currently connected wallet's chainId will be used or the default one from the config.\r\n * @returns An ethers.js provider or undefined.\r\n * @public\r\n */\r\nexport function useReadonlyNetwork(opts: UseReadonlyProviderOptions = {}): ReadonlyNetwork | undefined {\r\n  const chainId = useChainId({ queryParams: { chainId: opts.chainId } })\r\n  const providers = useReadonlyNetworks()\r\n  return providers[chainId as ChainId] !== undefined && chainId !== undefined\r\n    ? {\r\n        provider: providers[chainId as ChainId]!,\r\n        chainId: chainId,\r\n      }\r\n    : undefined\r\n}\r\n","import { ExternalProvider, JsonRpcProvider } from '@ethersproject/providers'\r\nimport { getAddress } from 'ethers/lib/utils'\r\nimport { validateArguments } from '../helpers/validateArgument'\r\nimport { useConfig, useNetwork } from '../providers'\r\nimport { useReadonlyNetwork } from './useReadonlyProvider'\r\n\r\ntype MaybePromise<T> = Promise<T> | any\r\n\r\ntype SupportedProviders =\r\n  | JsonRpcProvider\r\n  | ExternalProvider\r\n  | { getProvider: () => MaybePromise<JsonRpcProvider | ExternalProvider>; activate: () => Promise<any> }\r\n\r\n/**\r\n * @public\r\n */\r\nexport type Web3Ethers = {\r\n  activate: (provider: SupportedProviders) => Promise<void>\r\n  /**\r\n   * @deprecated\r\n   */\r\n  setError: (error: Error) => void\r\n  deactivate: () => void\r\n  connector: undefined\r\n  chainId?: number\r\n  account?: null | string\r\n  error?: Error\r\n  library?: JsonRpcProvider\r\n  active: boolean\r\n  activateBrowserWallet: () => void\r\n  isLoading: boolean\r\n  /**\r\n   * Switch to a different network.\r\n   */\r\n  switchNetwork: (chainId: number) => void\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useEthers(): Web3Ethers {\r\n  const {\r\n    network: { provider: networkProvider, chainId, accounts, errors }, \r\n    deactivate,\r\n    activate,\r\n    activateBrowserWallet,\r\n    isLoading,\r\n  } = useNetwork()\r\n\r\n  const { networks } = useConfig()\r\n  const supportedChainIds = networks?.map((network: any) => network.chainId)\r\n  const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0\r\n  const unsupportedChainIdError = new Error(\r\n    `Unsupported chain id: ${chainId}. Supported chain ids are: ${supportedChainIds}.`\r\n  )\r\n  unsupportedChainIdError.name = 'UnsupportedChainIdError'\r\n  const error = isUnsupportedChainId ? unsupportedChainIdError : errors[errors.length - 1]\r\n\r\n  const readonlyNetwork = useReadonlyNetwork()\r\n  const provider = networkProvider ?? (readonlyNetwork?.provider as JsonRpcProvider)\r\n\r\n  const switchNetwork = async (chainId: number) => {\r\n    validateArguments({ chainId }, { chainId: 'number' })\r\n\r\n    if (!provider) {\r\n      throw new Error('Provider not connected.')\r\n    }\r\n\r\n    await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }])\r\n  }\r\n\r\n  const account = accounts[0] ? getAddress(accounts[0]) : undefined\r\n\r\n  return {\r\n    connector: undefined,\r\n    library: provider,\r\n    chainId: isUnsupportedChainId ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork?.chainId,\r\n    account,\r\n    active: !!provider,\r\n    activate: async (providerOrConnector: SupportedProviders) => {\r\n      if ('getProvider' in providerOrConnector) {\r\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.')\r\n        await providerOrConnector.activate()\r\n        return activate(await providerOrConnector.getProvider())\r\n      }\r\n      return activate(providerOrConnector)\r\n    },\r\n    activateBrowserWallet,\r\n    deactivate,\r\n\r\n    setError: () => {\r\n      throw new Error('setError is deprecated')\r\n    },\r\n\r\n    error,\r\n    isLoading,\r\n\r\n    switchNetwork,\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\nimport { Contract } from 'ethers'\r\nimport { ContractMethodNames, Falsy, Params, TypedContract } from '../model/types'\r\nimport { useRawCalls } from './useRawCalls'\r\nimport { CallResult, decodeCallResult, encodeCallData } from '../helpers'\r\nimport { QueryParams } from '../constants/type/QueryParams'\r\nimport { useChainId } from './useChainId'\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface Call<T extends TypedContract = Contract, MN extends ContractMethodNames<T> = ContractMethodNames<T>> {\r\n  contract: T\r\n  method: MN\r\n  args: Params<T, MN>\r\n}\r\n\r\n/**\r\n * Makes a call to a specific method of a specific contract and returns the value or an error if present.\r\n * The hook will cause the component to refresh when a new block is mined and the return value changes.\r\n * A syntax sugar for useRawCall that uses ABI, function name, and arguments instead of raw data.\r\n * If typechain contract is used in call parameter then method name and arguments will be type checked.\r\n * Result will be typed as well.\r\n *\r\n * @param call a single call to a contract , also see {@link Call}\r\n * @returns The hook returns {@link CallResult} type.\r\n *          That is: undefined when call didn't return yet or a object { value | error } if it did,\r\n *          value: any[] | undefined - array of results or undefined if error occurred,\r\n *          error: Error | undefined - encountered error or undefined if call was successful.\r\n */\r\nexport function useCall<T extends TypedContract, MN extends ContractMethodNames<T>>(\r\n  call: Call<T, MN> | Falsy,\r\n  queryParams: QueryParams = {}\r\n): CallResult<T, MN> {\r\n  return useCalls([call], queryParams)[0]\r\n}\r\n\r\n/**\r\n * Makes calls to specific methods of specific contracts and returns values or an error if present.\r\n * The hook will cause the component to refresh when a new block is mined and the return values change.\r\n * A syntax sugar for useRawCalls that uses ABI, function name, and arguments instead of raw data.\r\n * @param calls a list of contract calls , also see {@link Call}.\r\n * @param queryParams see {@link QueryParams}.\r\n * @returns a list of results (see {@link CallResult} in {@link useCall} above).\r\n */\r\nexport function useCalls(calls: (Call | Falsy)[], queryParams: QueryParams = {}): CallResult<Contract, string>[] {\r\n  const chainId = useChainId({ queryParams })\r\n  const { isStatic } = queryParams\r\n\r\n  const rawCalls = useMemo(\r\n    () => calls.map((call) => (chainId !== undefined ? encodeCallData(call, chainId, isStatic) : undefined)),\r\n    [\r\n      JSON.stringify(\r\n        calls.map(\r\n          (call) => call && { address: call.contract.address.toLowerCase(), method: call.method, args: call.args }\r\n        )\r\n      ),\r\n      chainId,\r\n    ]\r\n  )\r\n  const results = useRawCalls(rawCalls)\r\n  return useMemo(() => results.map((result, idx) => decodeCallResult(calls[idx], result)), [results])\r\n}\r\n","import { Interface } from '@ethersproject/abi'\r\nimport { useMemo } from 'react'\r\nimport { ChainId } from '../constants'\r\nimport { QueryParams } from '../constants/type/QueryParams'\r\nimport { Falsy } from '../model/types'\r\nimport { RawCall } from '../providers'\r\nimport { useChainCalls } from './useChainCalls'\r\nimport { useChainId } from './useChainId'\r\n\r\nfunction warnOnInvalidContractCall(call: ContractCall | Falsy) {\r\n  console.warn(\r\n    `Invalid contract call: address=${call && call.address} method=${call && call.method} args=${call && call.args}`\r\n  )\r\n}\r\n\r\nfunction encodeCallData(call: ContractCall | Falsy, chainId: ChainId): RawCall | Falsy {\r\n  if (!call) {\r\n    return undefined\r\n  }\r\n  if (!call.address || !call.method) {\r\n    warnOnInvalidContractCall(call)\r\n    return undefined\r\n  }\r\n  try {\r\n    return { address: call.address, data: call.abi.encodeFunctionData(call.method, call.args), chainId }\r\n  } catch {\r\n    warnOnInvalidContractCall(call)\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n * @deprecated Use {@link useCall} instead.\r\n */\r\nexport interface ContractCall {\r\n  abi: Interface\r\n  address: string\r\n  method: string\r\n  args: any[]\r\n}\r\n\r\n/**\r\n * @public\r\n * @deprecated Use {@link useCalls} instead.\r\n */\r\nexport function useContractCall(call: ContractCall | Falsy, queryParams: QueryParams = {}): any[] | undefined {\r\n  return useContractCalls([call], queryParams)[0]\r\n}\r\n\r\n/**\r\n * @public\r\n * @deprecated Use {@link useCall} instead.\r\n */\r\nexport function useContractCalls(\r\n  calls: (ContractCall | Falsy)[],\r\n  queryParams: QueryParams = {}\r\n): (any[] | undefined)[] {\r\n  const chainId = useChainId({ queryParams })\r\n\r\n  const rawCalls = useMemo(\r\n    () => calls.map((call) => (chainId !== undefined ? encodeCallData(call, chainId) : undefined)),\r\n    [\r\n      JSON.stringify(\r\n        calls.map((call) => call && { address: call.address?.toLowerCase(), method: call.method, args: call.args })\r\n      ),\r\n      chainId,\r\n    ]\r\n  )\r\n\r\n  const results = useChainCalls(rawCalls)\r\n\r\n  return useMemo(\r\n    () =>\r\n      results.map((result, idx) => {\r\n        const call = calls[idx]\r\n        if (result === '0x') {\r\n          warnOnInvalidContractCall(call)\r\n          return undefined\r\n        }\r\n        return call && result ? (call.abi.decodeFunctionResult(call.method, result) as any[]) : undefined\r\n      }),\r\n    [JSON.stringify(results)]\r\n  )\r\n}\r\n","import { TransactionResponse } from '@ethersproject/abstract-provider'\r\nimport { useCallback, useState } from 'react'\r\nimport { useNotificationsContext, useTransactionsContext } from '../providers'\r\nimport { TransactionStatus, TransactionOptions } from '../'\r\nimport { TransactionState } from '../model'\r\nimport { errors } from 'ethers'\r\n\r\nconst isDroppedAndReplaced = (e: any) =>\r\n  e?.code === errors.TRANSACTION_REPLACED && e?.replacement && (e?.reason === 'repriced' || e?.cancelled === false)\r\n\r\nexport function usePromiseTransaction(chainId: number | undefined, options?: TransactionOptions) {\r\n  const [state, setState] = useState<TransactionStatus>({ status: 'None' })\r\n  const { addTransaction } = useTransactionsContext()\r\n  const { addNotification } = useNotificationsContext()\r\n\r\n  const resetState = useCallback(() => {\r\n    setState({ status: 'None' })\r\n  }, [setState])\r\n\r\n  const promiseTransaction = useCallback(\r\n    async (transactionPromise: Promise<TransactionResponse>) => {\r\n      if (!chainId) return\r\n      let transaction: TransactionResponse | undefined = undefined\r\n      try {\r\n        setState({ status: 'PendingSignature', chainId })\r\n\r\n        transaction = await transactionPromise\r\n\r\n        setState({ transaction, status: 'Mining', chainId })\r\n        addTransaction({\r\n          transaction: {\r\n            ...transaction,\r\n            chainId: chainId,\r\n          },\r\n          submittedAt: Date.now(),\r\n          transactionName: options?.transactionName,\r\n        })\r\n        const receipt = await transaction.wait()\r\n        setState({ receipt, transaction, status: 'Success', chainId })\r\n        return receipt\r\n      } catch (e: any) {\r\n        const errorMessage = e.error?.message ?? e.reason ?? e.data?.message ?? e.message\r\n        if (transaction) {\r\n          const droppedAndReplaced = isDroppedAndReplaced(e)\r\n\r\n          if (droppedAndReplaced) {\r\n            const status: TransactionState = e.receipt.status === 0 ? 'Fail' : 'Success'\r\n            const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed'\r\n\r\n            addNotification({\r\n              notification: {\r\n                type,\r\n                submittedAt: Date.now(),\r\n                transaction: e.replacement,\r\n                receipt: e.receipt,\r\n                transactionName: e.replacement?.transactionName,\r\n                originalTransaction: transaction,\r\n              },\r\n              chainId,\r\n            })\r\n\r\n            setState({\r\n              status,\r\n              transaction: e.replacement,\r\n              originalTransaction: transaction,\r\n              receipt: e.receipt,\r\n              errorMessage,\r\n              chainId,\r\n            })\r\n          } else {\r\n            setState({ status: 'Fail', transaction, receipt: e.receipt, errorMessage, chainId })\r\n          }\r\n        } else {\r\n          setState({ status: 'Exception', errorMessage, chainId })\r\n        }\r\n        return undefined\r\n      }\r\n    },\r\n    [chainId, setState, addTransaction, options]\r\n  )\r\n\r\n  return { promiseTransaction, state, resetState }\r\n}\r\n","import { TransactionOptions } from '../'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { JsonRpcProvider } from '@ethersproject/providers'\r\nimport { useCallback, useState } from 'react'\r\nimport { useEthers } from './useEthers'\r\nimport { usePromiseTransaction } from './usePromiseTransaction'\r\nimport { LogDescription } from 'ethers/lib/utils'\r\nimport { ContractFunctionNames, Params, TypedContract } from '../model/types'\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function connectContractToSigner(contract: Contract, options?: TransactionOptions, library?: JsonRpcProvider) {\r\n  if (contract.signer) {\r\n    return contract\r\n  }\r\n\r\n  if (options?.signer) {\r\n    return contract.connect(options.signer)\r\n  }\r\n\r\n  if (library?.getSigner()) {\r\n    return contract.connect(library.getSigner())\r\n  }\r\n\r\n  throw new TypeError('No signer available in contract, options or library')\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useContractFunction<T extends TypedContract, FN extends ContractFunctionNames<T>>(\r\n  contract: T,\r\n  functionName: FN,\r\n  options?: TransactionOptions\r\n) {\r\n  const { library, chainId } = useEthers()\r\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options)\r\n  const [events, setEvents] = useState<LogDescription[] | undefined>(undefined)\r\n\r\n  const send = useCallback(\r\n    async (...args: Params<T, FN>): Promise<void> => {\r\n      const contractWithSigner = connectContractToSigner(contract, options, library)\r\n      const receipt = await promiseTransaction(contractWithSigner[functionName](...args))\r\n      if (receipt?.logs) {\r\n        const events = receipt.logs.reduce((accumulatedLogs, log) => {\r\n          try {\r\n            return log.address.toLowerCase() === contract.address.toLowerCase()\r\n              ? [...accumulatedLogs, contract.interface.parseLog(log)]\r\n              : accumulatedLogs\r\n          } catch (_err) {\r\n            return accumulatedLogs\r\n          }\r\n        }, [] as LogDescription[])\r\n        setEvents(events)\r\n      }\r\n    },\r\n    [contract, functionName, options, library]\r\n  )\r\n\r\n  return { send, state, events, resetState }\r\n}\r\n","import { MultiCallABI } from '../constants'\r\nimport { useMulticallAddress } from './useMulticallAddress'\r\nimport { Falsy } from '../model/types'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { QueryParams } from '../constants/type/QueryParams'\r\nimport { useCall } from './useCall'\r\nimport { Contract } from 'ethers'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useEtherBalance(address: string | Falsy, queryParams: QueryParams = {}): BigNumber | undefined {\r\n  const multicallAddress = useMulticallAddress(queryParams)\r\n  const { value: value } =\r\n    useCall(\r\n      multicallAddress &&\r\n        address && {\r\n          contract: new Contract(multicallAddress, MultiCallABI),\r\n          method: 'getEthBalance',\r\n          args: [address],\r\n        },\r\n      queryParams\r\n    ) ?? {}\r\n  return value?.[0]\r\n}\r\n","import { ERC20Interface } from '../constants'\r\nimport { Falsy } from '../model/types'\r\nimport { TokenInfo } from '../model/TokenInfo'\r\nimport { Call, useCalls } from './useCall'\r\nimport { Contract } from 'ethers'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useToken(tokenAddress: string | Falsy): TokenInfo | undefined {\r\n  const partialCall = {\r\n    contract: new Contract(tokenAddress || '', ERC20Interface),\r\n    address: tokenAddress || '',\r\n    args: [],\r\n  }\r\n  const args = ['name', 'symbol', 'decimals', 'totalSupply'].map((method): Call => ({ ...partialCall, method }))\r\n  const [name, symbol, decimals, totalSupply] = useCalls(args)\r\n\r\n  if (!name && !symbol && !decimals && !totalSupply) {\r\n    return undefined\r\n  }\r\n\r\n  return {\r\n    name: name?.value[0] ?? '',\r\n    symbol: symbol?.value[0] ?? '',\r\n    decimals: decimals?.value[0],\r\n    totalSupply: totalSupply?.value[0],\r\n  }\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from 'ethers'\r\nimport { ERC20Interface } from '../constants'\r\nimport { QueryParams } from '../constants/type/QueryParams'\r\nimport { Falsy } from '../model/types'\r\nimport { useCall } from './useCall'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useTokenBalance(\r\n  tokenAddress: string | Falsy,\r\n  address: string | Falsy,\r\n  queryParams: QueryParams = {}\r\n): BigNumber | undefined {\r\n  const { value: tokenBalance } =\r\n    useCall(\r\n      address &&\r\n        tokenAddress && {\r\n          contract: new Contract(tokenAddress, ERC20Interface),\r\n          method: 'balanceOf',\r\n          args: [address],\r\n        },\r\n      queryParams\r\n    ) ?? {}\r\n  return tokenBalance?.[0]\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from 'ethers'\r\nimport { ERC20Interface } from '../constants'\r\nimport { QueryParams } from '../constants/type/QueryParams'\r\nimport { Falsy } from '../model/types'\r\nimport { useCall } from './useCall'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useTokenAllowance(\r\n  tokenAddress: string | Falsy,\r\n  ownerAddress: string | Falsy,\r\n  spenderAddress: string | Falsy,\r\n  queryParams: QueryParams = {}\r\n): BigNumber | undefined {\r\n  const { value: allowance } =\r\n    useCall(\r\n      ownerAddress &&\r\n        spenderAddress &&\r\n        tokenAddress && {\r\n          contract: new Contract(tokenAddress, ERC20Interface),\r\n          method: 'allowance',\r\n          args: [ownerAddress, spenderAddress],\r\n        },\r\n      queryParams\r\n    ) ?? {}\r\n  return allowance?.[0]\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction getItem(key: string) {\r\n  if (typeof window === 'undefined') {\r\n    return null\r\n  }\r\n\r\n  const item = window.localStorage.getItem(key)\r\n  if (item !== null) {\r\n    try {\r\n      return JSON.parse(item)\r\n    } catch {\r\n      // ignore error\r\n    }\r\n  }\r\n}\r\n\r\nfunction setItem(key: string, value: any) {\r\n  if (value === undefined) {\r\n    window.localStorage.removeItem(key)\r\n  } else {\r\n    const toStore = JSON.stringify(value)\r\n    window.localStorage.setItem(key, toStore)\r\n    return JSON.parse(toStore)\r\n  }\r\n}\r\n\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function useLocalStorage(key: string) {\r\n  const [value, setValue] = useState(() => getItem(key))\r\n\r\n  useEffect(() => {\r\n    setValue(getItem(key))\r\n  }, [key])\r\n\r\n  useEffect(() => {\r\n    setItem(key, value)\r\n  }, [value, key])\r\n\r\n  return [value, setValue] as const\r\n}\r\n","import { useMemo } from 'react'\r\nimport { QueryParams } from '../constants/type/QueryParams'\r\nimport { useTransactionsContext } from '../providers'\r\nimport { useEthers } from './useEthers'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useTransactions(queryParams: QueryParams = {}) {\r\n  const { chainId: defaultChainId, account } = useEthers()\r\n  const { addTransaction, transactions } = useTransactionsContext()\r\n  const { chainId: _chainId } = queryParams\r\n\r\n  const chainId = useMemo(() => _chainId ?? defaultChainId, [_chainId, defaultChainId])\r\n\r\n  const filtered = useMemo(() => {\r\n    if (chainId === undefined || !account) {\r\n      return []\r\n    }\r\n    return (transactions[chainId] ?? []).filter((x) => x.transaction.from === account)\r\n  }, [transactions, chainId, account])\r\n\r\n  return {\r\n    transactions: filtered,\r\n    addTransaction,\r\n  }\r\n}\r\n","import { useEffect, useRef } from 'react'\r\n\r\n// https://usehooks-typescript.com/react-hook/use-interval\r\n/**\r\n * @internal Intended for internal use - use it on your own risk\r\n */\r\nexport function useInterval(callback: () => void, delay: number | null) {\r\n  const savedCallback = useRef(callback)\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  useEffect(() => {\r\n    if (delay === null) {\r\n      return\r\n    }\r\n\r\n    const id = setInterval(() => savedCallback.current(), delay)\r\n\r\n    return () => clearInterval(id)\r\n  }, [delay])\r\n}\r\n","import { useMemo } from 'react'\r\nimport { Notification, useNotificationsContext } from '../providers'\r\nimport { useEthers } from './useEthers'\r\nimport { useInterval } from './useInterval'\r\nimport { useConfig } from '../providers/config/context'\r\n\r\nfunction getExpiredNotifications(notifications: Notification[], expirationPeriod: number) {\r\n  if (expirationPeriod === 0) {\r\n    return []\r\n  }\r\n  const timeFromCreation = (creationTime: number) => Date.now() - creationTime\r\n\r\n  return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod)\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useNotifications() {\r\n  const { chainId, account } = useEthers()\r\n  const { addNotification, notifications, removeNotification } = useNotificationsContext()\r\n  const {\r\n    notifications: { checkInterval, expirationPeriod },\r\n  } = useConfig()\r\n\r\n  const chainNotifications = useMemo(() => {\r\n    if (chainId === undefined || !account) {\r\n      return []\r\n    }\r\n    return notifications[chainId] ?? []\r\n  }, [notifications, chainId, account])\r\n\r\n  useInterval(() => {\r\n    if (!chainId) {\r\n      return\r\n    }\r\n\r\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod)\r\n    for (const notification of expiredNotification) {\r\n      removeNotification({ notificationId: notification.id, chainId })\r\n    }\r\n  }, checkInterval)\r\n\r\n  return {\r\n    notifications: chainNotifications,\r\n    addNotification,\r\n    removeNotification,\r\n  }\r\n}\r\n","import { TransactionRequest } from '@ethersproject/abstract-provider'\r\nimport { TransactionOptions } from '../'\r\nimport { useEthers } from './useEthers'\r\nimport { usePromiseTransaction } from './usePromiseTransaction'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useSendTransaction(options?: TransactionOptions) {\r\n  const { library, chainId } = useEthers()\r\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options)\r\n\r\n  const sendTransaction = async (transactionRequest: TransactionRequest) => {\r\n    const signer = options?.signer || library?.getSigner()\r\n    if (signer) {\r\n      await promiseTransaction(signer.sendTransaction(transactionRequest))\r\n    }\r\n  }\r\n\r\n  return { sendTransaction, state, resetState }\r\n}\r\n","import { useBlockNumber } from '../providers/blockNumber/blockNumber/context'\r\nimport { BigNumber } from 'ethers'\r\nimport { useEffect, useMemo, useState } from 'react'\r\nimport { useEthers } from './useEthers'\r\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks'\r\nimport { useBlockNumbers } from '../providers/blockNumber/blockNumbers'\r\nimport { QueryParams } from '../constants/type/QueryParams'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useGasPrice(queryParams: QueryParams = {}): BigNumber | undefined {\r\n  const { library } = useEthers()\r\n  const providers = useReadonlyNetworks()\r\n  const _blockNumber = useBlockNumber()\r\n  const blockNumbers = useBlockNumbers()\r\n\r\n  const [gasPrice, setGasPrice] = useState<BigNumber | undefined>()\r\n\r\n  const { chainId } = queryParams\r\n\r\n  const [provider, blockNumber] = useMemo(\r\n    () => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]),\r\n    [providers, library, blockNumbers, _blockNumber]\r\n  )\r\n\r\n  async function updateGasPrice() {\r\n    setGasPrice(await provider?.getGasPrice())\r\n  }\r\n\r\n  useEffect(() => {\r\n    void updateGasPrice()\r\n  }, [provider, blockNumber])\r\n\r\n  return gasPrice\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useEthers } from './useEthers'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useLookupAddress() {\r\n  const { account, library } = useEthers()\r\n  const [ens, setEns] = useState<string | null>()\r\n\r\n  useEffect(() => {\r\n    let mounted = true\r\n\r\n    if (account && library) {\r\n      library\r\n        ?.lookupAddress(account)\r\n        .then((name) => {\r\n          if (mounted) {\r\n            setEns(name)\r\n          }\r\n        })\r\n        .catch(() => setEns(null))\r\n    }\r\n\r\n    return () => {\r\n      mounted = false\r\n    }\r\n  }, [account, library])\r\n\r\n  return ens\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { TokenInfo } from '@uniswap/token-lists'\r\nimport { useEthers } from './useEthers'\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface TokenList {\r\n  name: string\r\n  logoURI: string\r\n  tokens: TokenInfo[]\r\n}\r\n\r\n/** \r\n * @public\r\n */\r\nexport function useTokenList(tokenListURI: string, overrideChainId?: number, tags?: string[]): TokenList | undefined {\r\n  const { chainId: providerChainId } = useEthers()\r\n  const [tokenList, setTokenList] = useState<TokenList>()\r\n\r\n  const chainId = overrideChainId || providerChainId\r\n\r\n  useEffect(() => {\r\n    fetch(tokenListURI)\r\n      .then(async (response) => {\r\n        if (response.ok) {\r\n          const { name, logoURI, tokens } = await response.json()\r\n          setTokenList({\r\n            name,\r\n            logoURI,\r\n            tokens: (tokens as TokenInfo[]).filter((token) => {\r\n              const sameChainId = token.chainId === chainId\r\n              if (!tags) {\r\n                return sameChainId\r\n              }\r\n              return sameChainId && token.tags && token.tags.some((tag) => tags.includes(tag))\r\n            }),\r\n          })\r\n        } else {\r\n          const errorMessage = await response.text()\r\n          return Promise.reject(new Error(errorMessage))\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        setTokenList(undefined)\r\n      })\r\n  }, [tokenListURI, chainId])\r\n\r\n  return tokenList\r\n}\r\n","import { useMemo } from 'react'\r\nimport { Chain, ChainId } from '../constants'\r\nimport { getChainMeta } from '../helpers/getChainMeta'\r\n\r\n/**\r\n * @public\r\n */\r\nexport function useChainMeta(chainId: ChainId): Chain {\r\n  return useMemo(() => getChainMeta(chainId), [chainId])\r\n}\r\n","import { Falsy } from \"../modules/usedapp2/model/types\";\r\n//import { useContractCall } from \"../modules/usedapp2/hooks\";\r\nimport { useCall } from \"../modules/usedapp2/hooks\";\r\n\r\nimport interfaceAbi from \"./nftAbi.json\";\r\n\r\nimport { Contract, utils } from \"ethers\";\r\n\r\n//BSC Test:\r\n//export const NFT = \"0x328B697bb7a660B3a3fEC1c0913F1A1DD3fC7Bd9\";\r\n\r\n// tCRO Test:\r\nexport const NFT = \"0xaA7bb5855C88A5b95665BAadB99F04DeEe8E8de3\"; \r\n\r\n// CRO LIVE:\r\n//export const NFT = \"0xaA7bb5855C88A5b95665BAadB99F04DeEe8E8de3\";\r\nexport const ABI = new utils.Interface(interfaceAbi);\r\n\r\nexport function Approve(to: string | Falsy, tokenId: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"approve\", args: [to, tokenId] }) ?? []; return result; }\r\nexport function Burn(_amount: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"burn\", args: [_amount] }) ?? []; return result; }\r\nexport function BurnRdnmTkn(_token: string | Falsy, _to: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"burnRdnmTkn\", args: [_token, _to] }) ?? []; return result; }\r\nexport function MintMultipleNFT(_amount: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"mintMultipleNFT\", args: [_amount] }) ?? []; return result; }\r\nexport function MintNFT() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"mintNFT\", args: [] }) ?? []; return result; }\r\nexport function OwnershipTransferred(previousOwner: string | Falsy, newOwner: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"OwnershipTransferred\", args: [previousOwner, newOwner] }) ?? []; return result; }\r\nexport function RenounceOwnership() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"renounceOwnership\", args: [] }) ?? []; return result; }\r\nexport function ReserveGiveaway(_amount: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"reserveGiveaway\", args: [_amount] }) ?? []; return result; }\r\nexport function SafeTransferFrom(from: string | Falsy, to: string | Falsy, tokenId: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"safeTransferFrom\", args: [from, to, tokenId] }) ?? []; return result; }\r\nexport function SafeTransferFrom2(from: string | Falsy, to: string | Falsy, tokenId: string | Falsy, _data: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"safeTransferFrom\", args: [from, to, tokenId, _data] }) ?? []; return result; }\r\nexport function SetApprovalForAll(operator: string | Falsy, approved: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"setApprovalForAll\", args: [operator, approved] }) ?? []; return result; }\r\nexport function SetBaseURI(baseURI: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"setBaseURI\", args: [baseURI] }) ?? []; return result; }\r\nexport function SetTokenReceiver(_new: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"setTokenReceiver\", args: [_new] }) ?? []; return result; }\r\nexport function ToggleSale() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"toggleSale\", args: [] }) ?? []; return result; }\r\nexport function Transfer(from: string | Falsy, to: string | Falsy, tokenId: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"Transfer\", args: [from, to, tokenId] }) ?? []; return result; }\r\nexport function TransferFrom(from: string | Falsy, to: string | Falsy, tokenId: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"transferFrom\", args: [from, to, tokenId] }) ?? []; return result; }\r\nexport function TransferOwnership(newOwner: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"transferOwnership\", args: [newOwner] }) ?? []; return result; }\r\nexport function WithdrawAll() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"withdrawAll\", args: [] }) ?? []; return result; }\r\nexport function BalanceOf(owner: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"balanceOf\", args: [owner] }) ?? []; return result; }\r\nexport function BaseURI() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"baseURI\", args: [] }) ?? []; return result; }\r\nexport function CalculatePrice() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"calculatePrice\", args: [] }) ?? []; return result; }\r\nexport function CalculatePriceMultiple(_amount: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"calculatePriceMultiple\", args: [_amount] }) ?? []; return result; }\r\nexport function CurrentSupply() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"currentSupply\", args: [] }) ?? []; return result; }\r\nexport function GetApproved(tokenId: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"getApproved\", args: [tokenId] }) ?? []; return result; }\r\nexport function IsApprovedForAll(owner: string | Falsy, operator: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"isApprovedForAll\", args: [owner, operator] }) ?? []; return result; }\r\nexport function IsSaleEnabled() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"isSaleEnabled\", args: [] }) ?? []; return result; }\r\nexport function MaxSupply() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"maxSupply\", args: [] }) ?? []; return result; }\r\nexport function Name() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"name\", args: [] }) ?? []; return result; }\r\nexport function Owner() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"owner\", args: [] }) ?? []; return result; }\r\nexport function OwnerOf(tokenId: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"ownerOf\", args: [tokenId] }) ?? []; return result; }\r\nexport function Receiver() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"receiver\", args: [] }) ?? []; return result; }\r\nexport function SupportsInterface(interfaceId: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"supportsInterface\", args: [interfaceId] }) ?? []; return result; }\r\nexport function Symbol() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"symbol\", args: [] }) ?? []; return result; }\r\nexport function TokenByIndex(index: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"tokenByIndex\", args: [index] }) ?? []; return result; }\r\nexport function TokenOfOwnerByIndex(owner: string | Falsy, index: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"tokenOfOwnerByIndex\", args: [owner, index] }) ?? []; return result; }\r\nexport function TokensOfOwner(_owner: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"tokensOfOwner\", args: [_owner] }) ?? []; return result; }\r\nexport function TokenURI(tokenId: string | Falsy) {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"tokenURI\", args: [tokenId] }) ?? []; return result; }\r\nexport function TotalSupply() {\r\n    const [result]: any = useCall({ contract: new Contract(NFT, ABI), method: \"totalSupply\", args: [] }) ?? []; return result; }\r\n","import { FC, useEffect, useState } from 'react';\r\nimport { Button, Box, Text } from \"@chakra-ui/react\";\r\nimport { useEthers } from \"../../modules/usedapp2/hooks\";\r\n\r\nimport { ABI as abi, NFT as token } from '../../abi/nftFunctions';\r\nimport { ethers } from 'ethers';\r\nimport { isBigNumberish } from '@ethersproject/bignumber/lib/bignumber';\r\n\r\nconst MintButton: FC = () => {\r\n  const [ singlePrice, setSinglePrice ] = useState(\"\");\r\n\r\n  const { account } = useEthers(); \r\n  const provider = new ethers.providers.Web3Provider((window as any).ethereum);\r\n  const signer = provider.getSigner();\r\n  const contract = new ethers.Contract(token, abi, signer);\r\n\r\n  contract[\"calculatePrice\"]()\r\n    .then((r: any) => { const temp = isBigNumberish(r) && ethers.utils.formatUnits(r, 0); temp && setSinglePrice(temp);})\r\n    .catch((e: any) => { console.log(e); });\r\n  \r\n  //useEffect(() => {}, [singlePrice])\r\n\r\n  return account ? (\r\n    <>\r\n        <Button\r\n          onClick={() => {contract.mintNFT( {value: singlePrice})}}\r\n          background=\"gray\"\r\n          height=\"38px\" width=\"140px\"\r\n          margin=\"1px\"\r\n          paddingInlineStart=\"3px\" paddingInlineEnd=\"3px\"\r\n          border=\"1px\" borderRadius=\"6px\" borderStyle=\"solid\" borderColor=\"transparent\"\r\n          _hover={{ border: \"1px\", borderRadius: \"6px\", borderStyle: \"solid\", backgroundColor: \"blue\" }}\r\n        >\r\n          <Text color={\"white\"} fontSize=\"1em\"> Mint NFT </Text>\r\n        </Button>\r\n      <br />\r\n      <Text color=\"green\" fontSize=\"1em\"> Ready to mint . . . </Text>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <Box>\r\n        <Button\r\n          background=\"gray\"\r\n          height=\"38px\" width=\"140px\"\r\n          margin=\"1px\"\r\n          paddingInlineStart=\"3px\" paddingInlineEnd=\"3px\"\r\n          border=\"1px\" borderRadius=\"6px\" borderStyle=\"solid\" borderColor=\"transparent\"\r\n          _hover={{ border: \"1px\", borderRadius: \"6px\", borderStyle: \"solid\", backgroundColor: \"red\" }}\r\n        >\r\n          <Text color=\"white\" fontSize=\"1em\"> Mint NFT </Text>\r\n        </Button>\r\n      </Box>\r\n      <br />\r\n      <Text color=\"red\" fontSize=\"1em\"> Connect wallet to mint . . . </Text>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MintButton;\r\n","import { FC, useEffect, useState } from \"react\";\r\nimport { Box, Text } from '@chakra-ui/react';\r\nimport { ethers } from \"ethers\";\r\nimport { isBigNumberish } from '@ethersproject/bignumber/lib/bignumber';\r\n\r\nimport { useEthers } from \"../../modules/usedapp2/hooks\";\r\nimport MintButton from \"./MintButton\";\r\nimport { ABI as abi, NFT as token } from '../../abi/nftFunctions';\r\n\r\nimport \"../../styles/mintBlock.scss\";\r\n\r\nconst BlockMintNFT: FC = () => {\r\n  const [ totalSupply, setTotalSupply ] = useState(\"\");\r\n  const [ maxSupply, setMaxSupply ] = useState(\"\");\r\n  const [ singlePrice, setSinglePrice ] = useState(\"\");\r\n\r\n  const { account } = useEthers(); \r\n  const provider = new ethers.providers.Web3Provider((window as any).ethereum);\r\n  const signer = provider.getSigner();\r\n  const contract = new ethers.Contract(token, abi, signer);\r\n\r\n  contract[\"totalSupply\"]()\r\n    .then((r: any) => { const temp = isBigNumberish(r) && ethers.utils.formatUnits(r, 0); temp && setTotalSupply(temp);})\r\n    .catch((e: any) => { console.log(e); });\r\n  contract[\"maxSupply\"]()\r\n    .then((r: any) => { const temp = isBigNumberish(r) && ethers.utils.formatUnits(r, 0); temp && setMaxSupply(temp);})\r\n    .catch((e: any) => { console.log(e); });\r\n  contract[\"calculatePrice\"]()\r\n    .then((r: any) => { const temp = isBigNumberish(r) && ethers.utils.formatUnits(r, 18); temp && setSinglePrice(temp);})\r\n    .catch((e: any) => { console.log(e); });\r\n\r\n  useEffect(() => {}, [singlePrice, totalSupply, maxSupply])\r\n    \r\n  return account ? (\r\n    <Box>\r\n      <div className=\"mint-box\">\r\n        <div className=\"price-box\">\r\n          <Text>{totalSupply} / {maxSupply} Minted</Text>\r\n          <Text>Cost to mint: </Text>\r\n          <Text>~{singlePrice} CRO</Text>\r\n        </div>\r\n        <div className=\"mint-button-box\"><MintButton /></div>\r\n      </div>\r\n    </Box>\r\n  ) : (\r\n    <Box><Text>Connect your wallet to mint...</Text></Box>\r\n  )\r\n}\r\n\r\nexport default BlockMintNFT;\r\n","import { Text, Grid, GridItem } from '@chakra-ui/react';\r\nimport { FC } from 'react';\r\n\r\nimport metadata from '../abi/parsedData.json';\r\nimport rates from '../abi/nftRates.json';\r\n\r\nconst MetadataBox: FC<{index: any}> = ({ index }) => {\r\n    const findIndex = (data: any, index: any) => {\r\n      const dataList: any = data.find((dataList: any) => dataList.index === index);\r\n      return dataList && dataList.index;\r\n    }\r\n    const data = findIndex(metadata, index);\r\n\r\n    return(<Grid templateColumns='repeat(2, 1fr)' gap={4}>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Background: </Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{metadata[data]['Background']}</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Rate:</Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{(rates['Background'][metadata[data]['Background'] as keyof typeof rates['Background']] * 100 / 3333).toFixed(2)}%</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Fur: </Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{metadata[data]['Fur']}</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Rate:</Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{(rates['Fur'][metadata[data]['Fur'] as keyof typeof rates['Fur']] * 100 / 3333).toFixed(2)}%</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Base: </Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{metadata[data]['Base']}</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Rate:</Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{(rates['Base'][metadata[data]['Base'] as keyof typeof rates['Base']] * 100 / 3333).toFixed(2)}%</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Injuries: </Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{metadata[data]['Hair-Hats']}</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Rate:</Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{(rates['Hair-Hats'][metadata[data]['Hair-Hats'] as keyof typeof rates['Hair-Hats']] * 100 / 3333).toFixed(2)}%</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Injuries: </Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{metadata[data]['Injuries']}</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Rate:</Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{(rates['Injuries'][metadata[data]['Injuries'] as keyof typeof rates['Injuries']] * 100 / 3333).toFixed(2)}%</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Mouth: </Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{metadata[data]['Mouth']}</Text>\r\n            </GridItem>\r\n            <GridItem display={\"flex\"} flexDirection={\"row\"}>\r\n              <Text color={\"white\"}>Rate:</Text>\r\n              <Text color={\"white\"} marginStart={\"1em\"}>{(rates['Mouth'][metadata[data]['Mouth'] as keyof typeof rates['Mouth']] * 100 / 3333).toFixed(2)}%</Text>\r\n            </GridItem>\r\n          </Grid>);\r\n}\r\n\r\nexport default MetadataBox;\r\n","import { useState, useEffect } from \"react\";\r\nimport CopyToClipboard from \"react-copy-to-clipboard\";\r\nimport { Card, CardGroup } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Link,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Text,\r\n  extendTheme,\r\n  ChakraProvider,\r\n  Image\r\n} from \"@chakra-ui/react\";\r\nimport { ExternalLinkIcon, CopyIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { ApeObject as NFTObject } from \"../models/Rekt Apes/ApeObject\";\r\nimport { useEthers } from \"../modules/usedapp2/hooks\";\r\n//import StatusCircle from \"./StatusCircle\";\r\nimport { ABI as abi, NFT as token } from '../abi/nftFunctions';\r\n\r\nimport MetadataBox from \"./MetadataBox\";\r\nimport { ethers } from \"ethers\";\r\n\r\n// image\r\n// status block\r\n// tabs: Image (option goes away on desktop) / Data / History\r\n// Data Block / History Block\r\n// Buttons Block: disable buttons that aren't useable (all disabled by default)\r\n\r\nconst theme = extendTheme({\r\n  components: {\r\n    Modal: {\r\n      baseStyle: (props: any) => ({\r\n        dialog: { \r\n          maxWidth: [\"80%\", \"80%\", \"80%\"],\r\n          minWidth: \"95%\",\r\n          maxHeight: [\"80%\", \"80%\", \"80%\"],\r\n          minHeight: \"95%\",\r\n          bg: \"#00ff00\"\r\n        }\r\n      })\r\n    }\r\n  }\r\n});\r\n\r\nconst Header = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\njustify-content: space-between;\r\n`;\r\n\r\ntype Props = { isOpen: any; onClose: any; nftObject: NFTObject; };\r\nexport default function NftModal({ isOpen, onClose, nftObject }: Props) {\r\n  const [ ownerOf, setOwnerOf ] = useState(\"\");\r\n\r\n  const { account } = useEthers(); \r\n  const provider = new ethers.providers.Web3Provider((window as any).ethereum);\r\n  const signer = provider.getSigner();\r\n  const contract = new ethers.Contract(token, abi, signer);\r\n\r\n  \r\n  useEffect(() => {\r\n    account && nftObject && (contract[\"ownerOf(uint256)\"](String(nftObject![\"edition\"])))\r\n      .then((r: any) => { const temp = r; temp && setOwnerOf(temp);})\r\n      .catch((e: any) => { console.log(e); });\r\n    ownerOf ? setOwnerOf(ownerOf.slice(0, 6) + \"...\" + ownerOf.slice(ownerOf.length - 4, ownerOf.length)) : setOwnerOf(\"\");\r\n  }, [])\r\n\r\n  //ownerOf = account ? OwnerOf(String(nftObject![\"edition\"])) : undefined;\r\n  //ownerOf = ownerOf ? ownerOf.slice(0, 6) + \"...\" + ownerOf.slice(ownerOf.length - 4, ownerOf.length) : \"\";\r\n  \r\n  let fileExtension = nftObject![\"edition\"] == \"3333\" ? \".jpg\" : \".png\";\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n    <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"md\">\r\n      <ModalOverlay />\r\n      <ModalContent background=\"gray.900\" border=\"1px\" borderStyle=\"solid\" borderColor=\"gray.700\" borderRadius=\"3xl\" >\r\n        <ModalHeader color=\"white\" px={4} fontSize=\"lg\" fontWeight=\"medium\"> {nftObject.name} </ModalHeader>\r\n        {/* <Header>\r\n          <ModalHeader color=\"white\" px={4} fontSize=\"lg\" fontWeight=\"medium\">Status: <StatusCircle input={4} /></ModalHeader>\r\n        </Header> */}\r\n        <ModalCloseButton\r\n          color=\"white\" fontSize=\"sm\"\r\n          _hover={{ color: \"whiteAlpha.700\" }}\r\n        />\r\n        <Header>\r\n        <ModalBody pt={0} px={1.5}>\r\n          <Box borderRadius=\"2.2em\" border=\"5px\" borderStyle=\"solid\" borderColor=\"gray.600\" width={\"400px\"} \r\n            borderStartColor={\"blue\"} borderEndColor={\"blue\"} borderTopColor={\"blue\"} borderBottomColor={\"blue\"}>\r\n            <Image src={\"https://fudgy.mypinata.cloud/ipfs/QmaHvkGj9ooAiDwDsVCdoUTbYqJfU5txQA8mR7xLYQwZKj/\" + String(nftObject![\"edition\"]) + fileExtension} alt=\"Rekt Apes\" \r\n            borderRadius={\"2em\"} width={\"400px\"}/>\r\n          </Box>\r\n          <Box  px={5} pt={4} pb={2} width={\"400px\"} >\r\n            \r\n            <Flex alignItems=\"center\" mt={2} mb={4} lineHeight={1}>\r\n            <Text color=\"white\">Owner: {ownerOf}</Text>\r\n              <Link\r\n                display=\"flex\" alignItems=\"center\" color=\"gray.400\" ml={3}\r\n                href={`https://cronos.org/explorer/address/${account}`} isExternal\r\n                _hover={{ color: \"whiteAlpha.800\", textDecoration: \"underline\" }}\r\n              >\r\n                <ExternalLinkIcon mr={4} />\r\n              </Link>\r\n            </Flex>\r\n            <Text color=\"white\" fontSize=\"xl\" fontWeight=\"semibold\" ml=\"2\" lineHeight=\"1.1\">Metadata:</Text>\r\n            <MetadataBox index={nftObject![\"edition\"]}/>\r\n          </Box>\r\n          </ModalBody>\r\n        <ModalBody pt={0} px={4}>\r\n          \r\n            \r\n        </ModalBody>\r\n          </Header>\r\n          {/* <ModalHeader color=\"white\" px={4} fontSize=\"lg\" fontWeight=\"medium\"> Transaction History: </ModalHeader> */}\r\n        {/* <ModalFooter justifyContent=\"end\" background=\"gray.700\" borderBottomLeftRadius=\"3xl\" borderBottomRightRadius=\"3xl\" p={6} ><Text></Text></ModalFooter> */}\r\n      </ModalContent>\r\n    </Modal>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { ApeObject as NFTObject } from \"../models/Rekt Apes/ApeObject\";\r\nimport { Card, } from \"react-bootstrap\";\r\nimport { Box, Button, useDisclosure } from '@chakra-ui/react';\r\n\r\nimport { ABI as abi, NFT as token } from '../abi/nftFunctions';\r\nimport { useEthers } from \"../modules/usedapp2/hooks\";\r\n\r\n//import StatusCircle from \"./StatusCircle\";\r\n\r\nimport NftModal from \"./NftModal\";\r\nimport \"@fontsource/inter\";\r\nimport { ethers } from \"ethers\";\r\n\r\ninterface Props { nftObject?: NFTObject; } \r\nfunction GenerateCard({ nftObject }: Props) {\r\n  const [ ownerOf, setOwnerOf ] = useState(\"\");\r\n\r\n  const { account } = useEthers(); \r\n  const provider = new ethers.providers.Web3Provider((window as any).ethereum);\r\n  const signer = provider.getSigner();\r\n  const contract = new ethers.Contract(token, abi, signer);\r\n\r\n  \r\n  useEffect(() => {\r\n    account && nftObject && (contract[\"ownerOf(uint256)\"](String(nftObject![\"edition\"])))\r\n      .then((r: any) => { const temp = r; temp && setOwnerOf(temp);})\r\n      .catch((e: any) => { console.log(e); });\r\n    ownerOf ? setOwnerOf(ownerOf.slice(0, 6) + \"...\" + ownerOf.slice(ownerOf.length - 4, ownerOf.length)) : setOwnerOf(\"\");\r\n  }, [])\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  //let ownerOf;\r\n  //ownerOf = account ? OwnerOf(String(nftObject![\"edition\"])) : undefined;\r\n  //ownerOf = ownerOf ? ownerOf.slice(0, 6) + \"...\" + ownerOf.slice(ownerOf.length - 4, ownerOf.length) : \"\";\r\n  \r\n  let fileExtension = nftObject![\"edition\"] == \"3333\" ? \".jpg\" : \".png\";\r\n  return nftObject ? (\r\n    <>\r\n      <Button onClick={onOpen}>\r\n        <Card className=\"generic-card\">\r\n          {/* <Card.Text className=\"card-status\"><StatusCircle input={3}/></Card.Text> */}\r\n          <Card.Img variant=\"top\" src={\"https://fudgy.mypinata.cloud/ipfs/QmaHvkGj9ooAiDwDsVCdoUTbYqJfU5txQA8mR7xLYQwZKj/\" + nftObject[\"edition\"] + fileExtension} />\r\n          <Card.Body>\r\n            <Card.Title>{nftObject.name}</Card.Title>\r\n            <Card.Text color=\"black\" >Owner:<br/>{ownerOf}</Card.Text>\r\n          </Card.Body>\r\n        </Card> \r\n      </Button>\r\n      <NftModal isOpen={isOpen} onClose={onClose} nftObject={nftObject}/>\r\n      </>\r\n  ) : (<Box>{`${console.log(\"GenerateCard failed: \", nftObject)}`}</Box>);\r\n}\r\n\r\nexport default GenerateCard;\r\n","import { ApeObject as NFTObject } from \"../../models/Rekt Apes/ApeObject\";\r\nimport { Card, } from \"react-bootstrap\";\r\nimport { Box, Button, useDisclosure } from '@chakra-ui/react';\r\n\r\nimport NftModal from \"../NftModal\";\r\nimport \"@fontsource/inter\";\r\n\r\ninterface Props { nftObject?: NFTObject; }\r\nexport function GenerateCard({ nftObject }: Props) {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return nftObject ? (\r\n    <>\r\n      <Button onClick={onOpen} background=\"transparent\" isActive={false}>\r\n        <Card className=\"modal-card\">\r\n          <Card.Img variant=\"top\" src={\"https://fudgy.mypinata.cloud/ipfs/QmaHvkGj9ooAiDwDsVCdoUTbYqJfU5txQA8mR7xLYQwZKj/\" + nftObject[\"edition\"] + \".png\"} />\r\n          <div className=\"overlay\"># {nftObject[\"edition\"]}</div>\r\n        </Card>\r\n      </Button>\r\n      <NftModal isOpen={isOpen} onClose={onClose} nftObject={nftObject}/>\r\n      </>\r\n  ) : (<Box>{`${console.log(\"GenerateCard failed: \", nftObject)}`}</Box>);\r\n}\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport { SimpleGrid, Button } from '@chakra-ui/react';\r\n\r\nimport { ApeObject as NFTObject } from \"../models/Rekt Apes/ApeObject\";\r\nimport GenerateCard from \"./GenerateCard\";\r\nimport { GenerateCard as GenerateTinyCard } from \"./AccountModal/AccountModalCard\";\r\nimport \"../styles/pagination.scss\";\r\n\r\nconst renderData = (data: NFTObject[], columns: number) => {\r\n  return window.innerWidth > 580\r\n    ? (<SimpleGrid columns={columns} spacing={10}>{data.map((todo: any, index: any) => {\r\n      return <li key={index} className=\"item\"><GenerateCard nftObject = {data[index]} /></li>;\r\n    })}</SimpleGrid>)\r\n    : (<SimpleGrid columns={3} spacingY={28}>{data.map((todo: any, index: any) => {\r\n      return <li key={index} className=\"item\"><GenerateTinyCard nftObject = {data[index]} /></li>;\r\n    })}</SimpleGrid>);\r\n};\r\n\r\n///@Dev - Only create a grid of paginated card objects given inputted data of type NFTObject[]\r\ninterface Props { nftObjects: NFTObject[]; }\r\nfunction PaginationComponent({ nftObjects }: Props) {\r\n  const [data, setData] = useState<NFTObject[]>([]);\r\n  const [currentPage, setcurrentPage] = useState(1);\r\n  const [itemsPerPage, setitemsPerPage] = useState(10);\r\n  console.log(\"Window width: \", window.innerWidth);\r\n  const pages = [];\r\n  for (let i = 1; i <= Math.ceil(data.length / itemsPerPage); i++) { pages.push(i); }\r\n\r\n  const indexOfLastItem = currentPage*itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n  const [pageNumberLimit, setpageNumberLimit] = useState(5);\r\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);\r\n  const [columns, setColumns] = useState(5);\r\n\r\n  useEffect(() => { setData(nftObjects); }, []);\r\n  const handleClick = (event: any) => { setcurrentPage(Number(event.target.id)); };\r\n  \r\n  const renderPageNumbers = pages.map((number: any) => {\r\n    if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n      return (<li key={number} id={number} onClick={handleClick} className={currentPage == number ? \"active\" : undefined} > {number} </li>);\r\n    } else { return undefined; }\r\n  });\r\n  \r\n    const handleNextbtn = () => {\r\n    setcurrentPage(currentPage + 1);\r\n\r\n    if (currentPage + 1 > maxPageNumberLimit) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n    }\r\n  };\r\n\r\n  const handlePrevbtn = () => {\r\n    setcurrentPage(currentPage - 1);\r\n\r\n    if ((currentPage - 1) % pageNumberLimit == 0) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n    }\r\n  };\r\n  \r\n  let pageIncrementBtn = null;\r\n  let pageDecrementBtn = null;\r\n  if (pages.length > maxPageNumberLimit) { pageIncrementBtn = <li onClick={handleNextbtn}> &hellip; </li>; }\r\n  if (minPageNumberLimit >= 1)           { pageDecrementBtn = <li onClick={handlePrevbtn}> &hellip; </li>; }\r\n\r\n  return (\r\n    <>\r\n      {renderData(currentItems, columns)}\r\n<div className=\"pageNumbers\">\r\n      <ul className=\"pageNumbers\">\r\n        <Button onClick={handlePrevbtn} disabled={currentPage == pages[0] ? true : false} > Prev </Button>\r\n        {pageDecrementBtn}\r\n        {renderPageNumbers}\r\n        {pageIncrementBtn}\r\n        <Button onClick={handleNextbtn} disabled={currentPage == pages[pages.length - 1] ? true : false} > Next </Button>\r\n      </ul></div>\r\n   \r\n    </>\r\n  );\r\n}\r\n\r\nexport default PaginationComponent;\r\n","import { FC, useState, useEffect } from \"react\";\r\nimport { Box, Heading, Text, } from '@chakra-ui/react';\r\nimport { isBigNumberish } from '@ethersproject/bignumber/lib/bignumber';\r\n\r\nimport { useEthers } from \"../../modules/usedapp2/hooks\";\r\nimport { ApeObject as NFTObject } from \"../../models/Rekt Apes/ApeObject\";\r\nimport { ABI as abi, NFT as token } from '../../abi/nftFunctions';\r\nimport metadata from '../../abi/metadata.json';\r\nimport PaginationComponent from '../PaginationComponent';\r\nimport { ethers } from \"ethers\";\r\n\r\nconst BlockRecentMints: FC = () => {\r\n  const [ totalSupply, setTotalSupply ] = useState(\"\");\r\n\r\n  const { account } = useEthers(); \r\n  const provider = new ethers.providers.Web3Provider((window as any).ethereum);\r\n  const signer = provider.getSigner();\r\n  const contract = new ethers.Contract(token, abi, signer);\r\n\r\n  \r\n \r\n  const [data, setData] = useState<NFTObject[]>([]);\r\n \r\n  function MakeArray(data: NFTObject[], totalMinted: any) {\r\n    let newArray: NFTObject[] = [];\r\n    for(let index=0; index<totalMinted; index++) { newArray = [data[index]].concat(newArray)}\r\n    return newArray;\r\n  }\r\n   \r\n  function RecentMints(totalSupply: any) {\r\n    const nftList: any = metadata;\r\n    const objects: NFTObject[] = nftList;\r\n    const totalMinted = totalSupply && parseInt(totalSupply);\r\n    setData(MakeArray(objects, totalMinted));\r\n  };\r\n  \r\n  useEffect(() => { \r\n    RecentMints(totalSupply);\r\n    contract[\"totalSupply\"]()\r\n      .then((r: any) => { const temp = isBigNumberish(r) && ethers.utils.formatUnits(r, 0); temp && setTotalSupply(temp);})\r\n      .catch((e: any) => { console.log(e); });\r\n   }, [totalSupply])\r\n  \r\n  if(account) {\r\n    if(data.length!=0) { \r\n      return(<>\r\n        <Heading>Recent Mints: </Heading>\r\n        <PaginationComponent nftObjects = {data}/>\r\n      </>)\r\n    } else{ return (<><Text>Error: Data could not be loaded...</Text></>)}\r\n  } else {\r\n    return(<><Box>\r\n      <Heading>Recent Mints (nope): </Heading>\r\n      <Text>You need to connect you wallet to view recent mints...</Text>\r\n    </Box></>)}\r\n}\r\n\r\nexport default BlockRecentMints;\r\n\r\n\r\n\r\n/*\r\n//fetch(\"https://fudgy.mypinata.cloud/ipfs/QmXsHcHvrBWoRLb3jcqyuEUuxEaD8RumpFMxBsdNSnK3MW/_metadata.json\")\r\n      //.then(response2 => {\r\n        //console.log(\"inside NFT response: \", response2.json()+\"]\");\r\n        //let myData = response.json();\r\n        \r\n        /*response2.json()\r\n          .then(response => {\r\n            console.log(\"inside of all\");\r\n            console.log(\"newObject: \", response);\r\n          }).catch(error => { console.log(error); });*/\r\n        /*\r\n        response2.json()\r\n          .then(response => {\r\n            for(var object of response) {\r\n              \r\n            \r\n            setData([...data, {\r\n              attributes: {\r\n                Background: object[\"attributes\"][\"Background\"],\r\n                Color:      object[\"attributes\"][\"Color\"],\r\n                Spots:      object[\"attributes\"][\"Spots\"],\r\n                Base:       object[\"attributes\"][\"Base\"],\r\n                Eyes:       object[\"attributes\"][\"Eyes\"],\r\n                Eyebrow:    object[\"attributes\"][\"Eyebrow\"],\r\n                Mouth:      object[\"attributes\"][\"Mouth\"],\r\n                Nose:       object[\"attributes\"][\"Nose Area\"],\r\n                Head:       object[\"attributes\"][\"Head\"],\r\n                Wrist:      object[\"attributes\"][\"Wrist\"]\r\n              },\r\n              custom_fields: { \r\n                compiler:   object[\"custom_fields\"][\"compiler\"], \r\n                date:       object[\"custom_fields\"][\"date\"], \r\n                dna:        object[\"custom_fields\"][\"dna\"], \r\n                edition:    object[\"custom_fields\"][\"edition\"]\r\n              },\r\n              description:  object[\"description\"],\r\n              external_url: object[\"external_url\"],\r\n              file_url:     object[\"file_url\"],\r\n              name:         object[\"name\"]\r\n            }]);\r\n          }\r\n          }).catch(error => { console.log(error); });*/\r\n      //}).catch(error => { console.log(error); });*/\r\n","import { FC, useEffect } from \"react\";\r\n//import Countdown from \"../components/Countdown/Countdown\";\r\nimport BlockMintNFT from \"../components/home/BlockMintNFT\";\r\nimport BlockRecentMints from \"../components/home/BlockRecentMints\";\r\n\r\n//import { useEthers } from \"../modules/usedapp2/hooks\";\r\n//import { IsSaleEnabled, } from '../abi/nftFunctions';\r\n\r\nconst Home: FC = () => {\r\n\r\n  //1648224000000\r\n  //1647933422936\r\n  console.log(\"Date: \", Date.now());\r\n  console.log(\"Countdown: \", 1648224000000 - Date.now());\r\n\r\n  //const { account } = useEthers(); \r\n  //const isSaleEnabled = IsSaleEnabled();\r\n  useEffect(() => {}, []);\r\n  //console.log(\"Contract status: \", isSaleEnabled);\r\n\r\n  \r\n    return ( \r\n      <div >\r\n        <BlockMintNFT />\r\n        <BlockRecentMints />\r\n      </div>\r\n    );\r\n\r\n  //   return 1648224000000 - Date.now() <=0 && isSaleEnabled ? ( \r\n  //     <div>\r\n  //       <BlockMintNFT /> \r\n  //       <BlockRecentMints />\r\n  //     </div>\r\n  //   ) :\r\n  //   (<div className=\"default-dark\">\r\n  //     <Countdown />\r\n  //   </div>);\r\n  };\r\n  \r\n  export default Home;\r\n","import { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport BlockApprove from \"../components/AdminNFT/BlockApprove\";\r\n\r\n\r\nconst AdminNFT: FC = () => {\r\n  \r\n  \r\n  return (\r\n    <>\r\n    <div className=\"background-faq\">\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n  \r\n  export default AdminNFT;\r\n","import { FC } from \"react\";\r\nimport \"./App.scss\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport AdminNFT from \"./pages/AdminNFT\";\r\n//import Configurations from \"./pages/Configurations\";\r\nimport {\r\n  HashRouter,\r\n  Route,\r\n  Switch\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n//import IpfsRouter from \"ipfs-react-router\";\r\n\r\n// change sidebar to consume x height\r\n// change footer to consume y height\r\n// change Route to consume 100% - x - y height\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <>\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route path=\"/\" component={Home} exact></Route>\r\n          <Route path=\"/admin-nft\" component={AdminNFT} exact></Route>\r\n        </Switch> \r\n      </HashRouter>\r\n    </> \r\n  );\r\n}; \r\n\r\nexport default App;\r\n","import { useEffect, useRef } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nimport { useEthers } from \"../../modules/usedapp2/hooks\";\r\n\r\nconst StyledIdenticon = styled.div`\r\n  height: 1rem;\r\n  width: 1rem;\r\n  border-radius: 1.125rem;\r\n  classname: styledIdenticon;\r\n`;\r\n\r\nexport default function Identicon() {\r\n  const ref = useRef<HTMLDivElement>();\r\n  const { account } = useEthers();\r\n\r\n  useEffect(() => {\r\n    if (account && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)));\r\n    }\r\n  }, [account]);\r\n\r\n  return <StyledIdenticon ref={ref as any} />;\r\n}\r\n","import { Button, Box, Text } from \"@chakra-ui/react\";\r\nimport { formatEther } from \"@ethersproject/units\";\r\nimport Identicon from \"./Identicon\";\r\nimport { ethers } from \"ethers\";\r\n\r\n//import { useEthers2, useEtherBalance } from \"../../modules/usedapp2/hooks\";\r\nimport { useEthers, useEtherBalance } from \"../../modules/usedapp2/hooks\";\r\n\r\ntype Props = { handleOpenModal: any; };\r\n//type Props = { handleOpenModal: any; handleOpenModal2: any; };\r\n//export default function ConnectButton({ handleOpenModal, handleOpenModal2 }: Props) {\r\nexport default function ConnectButton({ handleOpenModal }: Props) {\r\n  const { activateBrowserWallet, account, chainId } = useEthers();\r\n  const etherBalance = useEtherBalance(account);\r\n\r\n  function handleConnectWallet() { activateBrowserWallet(); }\r\n\r\n  console.log(\"useEtherBalance(account): \", etherBalance);\r\n\r\n  return account ? (\r\n    <Box maxWidth={\"320px\"}> \r\n    <Box display=\"flex\" alignItems=\"center\" background=\"gray.700\" borderRadius=\"xl\" py=\"0\" mr=\"4\">\r\n      <Box className=\"ethBox\">\r\n        <Text color=\"white\" className=\"ethText\">\r\n          {etherBalance && parseFloat(formatEther(etherBalance)).toFixed(3)}\r\n          {chainId === 62621\r\n            ? \" MTV\"\r\n            : chainId === 4002\r\n            ? \" tFTM\"\r\n            : chainId === 250\r\n            ? \" FTM\"\r\n            : chainId === 97\r\n            ? \" tBNB\"\r\n            : chainId === 56\r\n            ? \" BNB\"\r\n            : chainId === 2152\r\n            ? \" FRA\"\r\n            : chainId === 2153\r\n            ? \" tFRA\"\r\n            : chainId === 25\r\n            ? \" CRO\"\r\n            : chainId === 338\r\n            ? \" tCRO\"\r\n            : \" ?ETH\"\r\n          } \r\n        </Text>\r\n      </Box>\r\n      <Button\r\n        className=\"accountButton\"\r\n        onClick={handleOpenModal}\r\n        bg=\"gray.800\"\r\n        border=\"1px solid transparent\"\r\n        _hover={{ border: \"1px\", borderStyle: \"solid\", borderColor: \"blue.400\", backgroundColor: \"gray.700\" }}\r\n        borderRadius=\"xl\"\r\n        m=\"1px\"\r\n        px={3}\r\n      >\r\n        <Text className=\"accountText\" color=\"white\" fontWeight=\"medium\" mr=\"2\">\r\n          {account && `${account.slice(0, 6)}...${account.slice(account.length - 4, account.length)}`}\r\n        </Text>\r\n        <Identicon />\r\n      </Button>\r\n    </Box>\r\n    </Box>\r\n  ) : (\r\n    <Button onClick={handleConnectWallet}>Connect to a wallet</Button>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { SimpleGrid, Button } from '@chakra-ui/react';\r\n\r\nimport { ApeObject as NFTObject } from \"../../models/Rekt Apes/ApeObject\";\r\nimport { GenerateCard } from \"./AccountModalCard\";\r\nimport \"../../styles/modal.scss\";\r\n\r\nconst renderData = (data: NFTObject[]) => {\r\n  return (\r\n    <SimpleGrid columns={3} spacingY={28}>{data.map((todo: any, index: any) => {\r\n      return <li key={index} className=\"item\" ><GenerateCard nftObject = {data[index]} /></li>;\r\n    })}</SimpleGrid>\r\n  );\r\n};\r\n\r\n///@Dev - Only create a grid of paginated card objects given inputted data of type NFTObject[]\r\ninterface Props { nftObjects: NFTObject[]; }\r\nfunction PaginationComponent({ nftObjects }: Props) {\r\n  console.log(\"nftObjects: \", nftObjects)\r\n  const [data, setData] = useState<NFTObject[]>([]);\r\n  const [currentPage, setcurrentPage] = useState(1);\r\n  const [itemsPerPage, setitemsPerPage] = useState(6);\r\n  const pages = [];\r\n  for (let i = 1; i <= Math.ceil(data.length / itemsPerPage); i++) { pages.push(i); }\r\n  if(pages.length == 0) pages.push(1);\r\n  console.log(\"pages: \", pages)\r\n\r\n  const indexOfLastItem = currentPage*itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n  const [pageNumberLimit, setpageNumberLimit] = useState(5);\r\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);\r\n\r\n  useEffect(() => { setData(nftObjects); }, [pages]);\r\n  const handleClick = (event: any) => { setcurrentPage(Number(event.target.id)); };\r\n  \r\n  const renderPageNumbers = pages.map((number: any) => {\r\n    if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n      return (<li key={number} id={number} onClick={handleClick} className={currentPage == number ? \"active\" : undefined} > {number} </li>);\r\n    } else { return undefined; }\r\n  });\r\n  \r\n    const handleNextbtn = () => {\r\n    setcurrentPage(currentPage + 1);\r\n\r\n    if (currentPage + 1 > maxPageNumberLimit) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n    }\r\n  };\r\n\r\n  const handlePrevbtn = () => {\r\n    setcurrentPage(currentPage - 1);\r\n\r\n    if ((currentPage - 1) % pageNumberLimit == 0) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n    }\r\n  };\r\n  \r\n  let pageIncrementBtn = null;\r\n  let pageDecrementBtn = null;\r\n  if (pages.length > maxPageNumberLimit) { pageIncrementBtn = <li onClick={handleNextbtn}> &hellip; </li>; }\r\n  if (minPageNumberLimit >= 1)           { pageDecrementBtn = <li onClick={handlePrevbtn}> &hellip; </li>; }\r\n\r\n  return (\r\n    <>\r\n      {renderData(currentItems)}\r\n\r\n      <ul className=\"pageNumbers\">\r\n        <Button onClick={handlePrevbtn} disabled={currentPage == pages[0] ? true : false} > Prev </Button>\r\n        {pageDecrementBtn}\r\n        {renderPageNumbers}\r\n        {pageIncrementBtn}\r\n        <Button onClick={handleNextbtn} disabled={currentPage == pages[pages.length - 1] ? true : false} > Next </Button>\r\n      </ul>\r\n   \r\n    </>\r\n  );\r\n}\r\n\r\nexport default PaginationComponent;\r\n","import { FC, useState, useEffect }      from \"react\";\r\nimport { formatUnits }                  from \"@ethersproject/units\";\r\n\r\nimport { useEthers }                    from \"../../modules/usedapp2/hooks\";\r\nimport { ApeObject as NFTObject }       from \"../../models/Rekt Apes/ApeObject\";\r\nimport metadata                         from '../../abi/metadata.json';\r\nimport PaginationComponent              from './AccountModalPagination';\r\nimport { ABI as abi, NFT as token }     from '../../abi/nftFunctions';\r\nimport { ethers } from \"ethers\";\r\n\r\nconst AccountModalCollection: FC<{balance: number}> = ({balance}) => {\r\n    const [data, setData] = useState<NFTObject[]>([]);\r\n    const [ tokensOfOwner, setTokensOfOwner ] = useState([]);\r\n\r\n    const { account } = useEthers(); \r\n    const provider = new ethers.providers.Web3Provider((window as any).ethereum);\r\n    const signer = provider.getSigner();\r\n    const contract = new ethers.Contract(token, abi, signer);\r\n\r\n    \r\n    \r\n    contract[\"tokensOfOwner(address)\"](account)\r\n        .then((r: any) => { const temp = r; temp && setTokensOfOwner(temp);})\r\n        .catch((e: any) => { console.log(e); });\r\n    \r\n    const temp: any[] = tokensOfOwner;\r\n    let indecies: number[] = [];\r\n    if(account && tokensOfOwner) for(let i=0; i<balance; i++) indecies = [...indecies, tokensOfOwner[i] && formatUnits(tokensOfOwner[i], 0)];\r\n    \r\n    function MakeArray(data: NFTObject[], indecies: any[]) {\r\n        let newArray: NFTObject[] = [];\r\n        for(let index=0; index<=indecies.length; index++) { newArray = [...newArray, data[indecies[index]-1]]}\r\n        return newArray;\r\n    }\r\n      \r\n    function Collection(objectList: any) {\r\n        const objects: NFTObject[] = objectList;\r\n        setData(MakeArray(objects, indecies));\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n        Collection(metadata);\r\n    }, [tokensOfOwner])\r\n\r\n    return (<PaginationComponent nftObjects = {data} />);\r\n}\r\n\r\nexport default AccountModalCollection;\r\n","import { useEffect, useState } from \"react\";\r\nimport CopyToClipboard from \"react-copy-to-clipboard\";\r\nimport { ExternalLinkIcon, CopyIcon } from \"@chakra-ui/icons\";\r\nimport { isBigNumberish } from '@ethersproject/bignumber/lib/bignumber';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Link,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Text,\r\n  Grid\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { ABI as abi, NFT as token } from '../../abi/nftFunctions';\r\nimport Identicon              from \"./Identicon\";\r\nimport { useEthers }         from \"../../modules/usedapp2/hooks\";\r\nimport AccountModalCollection from \"./AccountModalCollection\"; \r\nimport { ethers } from \"ethers\";\r\n\r\ntype Props = { isOpen: any; onClose: any; };\r\nexport default function AccountModal({ isOpen, onClose }: Props) {\r\n  const [, setValue] = useState(\"\");\r\n  const [ balanceOf, setBalanceOf ] = useState(\"\");\r\n\r\n  const { account, deactivate } = useEthers();\r\n  const provider = new ethers.providers.Web3Provider((window as any).ethereum);\r\n  const signer = provider.getSigner();\r\n  const contract = new ethers.Contract(token, abi, signer);\r\n\r\n  contract[\"balanceOf(address)\"](account)\r\n    .then((r: any) => { const temp = isBigNumberish(r) && ethers.utils.formatUnits(r, 0); temp && setBalanceOf(temp);})\r\n    .catch((e: any) => { console.log(e); });\r\n\r\n  useEffect(() => {}, [contract])\r\n\r\n  function handleDeactivateAccount() {\r\n    deactivate();\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"md\">\r\n      <ModalOverlay />\r\n      <ModalContent background=\"gray.900\" border=\"1px\" borderStyle=\"solid\" borderColor=\"gray.700\" borderRadius=\"3xl\" marginTop=\"220px\">\r\n        <ModalHeader color=\"white\" px={4} fontSize=\"lg\" fontWeight=\"medium\"> Account </ModalHeader>\r\n        <ModalCloseButton color=\"white\" fontSize=\"sm\" _hover={{ color: \"whiteAlpha.700\" }} />\r\n        <ModalBody pt={0} px={4}>\r\n          <Box borderRadius=\"3xl\" border=\"1px\" borderStyle=\"solid\" borderColor=\"gray.600\" px={5} pt={4} pb={2} mb={3} >\r\n            <Flex justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n              <Text color=\"gray.400\" fontSize=\"sm\"> Connected with MetaMask </Text>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                borderColor=\"blue.800\"\r\n                borderRadius=\"3xl\"\r\n                color=\"blue.500\"\r\n                fontSize=\"13px\"\r\n                fontWeight=\"normal\"\r\n                px={2}\r\n                height=\"26px\"\r\n                _hover={{ background: \"none\", borderColor: \"blue.300\", textDecoration: \"underline\" }}\r\n                onClick={handleDeactivateAccount}\r\n              > Change </Button>\r\n            </Flex>\r\n            <Flex alignItems=\"center\" mt={2} mb={4} lineHeight={1}>\r\n              <Identicon />\r\n              <Text color=\"white\" fontSize=\"xl\" fontWeight=\"semibold\" ml=\"2\" lineHeight=\"1.1\"> \r\n                {account && `${account.slice(0, 6)}...${account.slice(account.length - 4, account.length)}`}\r\n              </Text>\r\n            </Flex>\r\n            <Flex alignContent=\"center\" m={3}>\r\n              <CopyToClipboard text={`${account}`} onCopy={() => setValue(`${account}`)}>\r\n                <Button\r\n                  variant=\"link\"\r\n                  color=\"gray.400\"\r\n                  fontWeight=\"normal\"\r\n                  fontSize=\"sm\"\r\n                  _hover={{ textDecoration: \"none\", color: \"whiteAlpha.800\" }}\r\n                >\r\n                  <CopyIcon mr={1} />\r\n                  Copy Address\r\n                </Button>\r\n              </CopyToClipboard>\r\n              <Link\r\n                fontSize=\"sm\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                href={`https://cronos.org/explorer/address/${account}`}\r\n                isExternal\r\n                color=\"gray.400\"\r\n                ml={6}\r\n                _hover={{ color: \"whiteAlpha.800\", textDecoration: \"underline\" }}\r\n              >\r\n                <ExternalLinkIcon mr={1} />\r\n                View on Explorer\r\n              </Link>\r\n            </Flex>\r\n          </Box>\r\n        </ModalBody>\r\n\r\n        <ModalFooter \r\n          justifyContent=\"end\"\r\n          background=\"gray.700\"\r\n          borderBottomLeftRadius=\"3xl\"\r\n          borderBottomRightRadius=\"3xl\"\r\n          height=\"600px\"\r\n          padding= \"10px\"\r\n        >\r\n          <Grid className=\"modal-footer\">\r\n          <div className=\"modal-footer-balance\">Balance: {balanceOf}</div>\r\n        <AccountModalCollection balance={parseInt(balanceOf)}/>\r\n        </Grid>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport \"../styles/header.scss\";\r\n\r\nimport { AiOutlineMenu, AiOutlineClose } from \"react-icons/ai\";\r\n\r\nimport { ChakraProvider, useDisclosure, Link, Image, theme } from \"@chakra-ui/react\";\r\nimport ConnectButton from \"./AccountModal/ConnectButton\";\r\nimport AccountModal from \"./AccountModal/AccountModal\";\r\nimport SelectorModal from \"./AccountModal/SelectorModal\";\r\nimport \"@fontsource/inter\";\r\n//import { useEthers2 } from \"../modules/usedapp2/hooks\"\r\n\r\n\r\n\r\nconst Header = () => {\r\n  const [click, setClick] = useState(false);\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  //const { account } = useEthers2(\"\");\r\n  //const { isOpen2, onOpen2, onClose2 } = useDisclosure();\r\n\r\n  \r\n  return (\r\n    <div className=\"header-header\">\r\n      <div className=\"logo-nav\">\r\n        <div className=\"logo-container\">\r\n        <Link href={`/#`} onClick={closeMobileMenu}><Image src={require(\"../assets/images/logo.png\").default} className=\"logo\" alt=\"MTV Sharks\" /></Link>\r\n        </div>\r\n\r\n        <ul className={click ? \"nav-options active\" : \"nav-options\"}>\r\n        <li className=\"option\" onClick={closeMobileMenu}>\r\n          <a href=\"https://twitter.com/RektApesNFT\">Twitter</a>\r\n        </li>\r\n        {/* <li className=\"option mobile-option\" onClick={closeMobileMenu}><a href=\"#\">Account</a></li> */}\r\n\r\n            \r\n          <li className=\"option mobile-option\" onClick={closeMobileMenu}>\r\n              <ChakraProvider theme={theme}>\r\n                <ConnectButton handleOpenModal={onOpen} />\r\n                <AccountModal isOpen={isOpen} onClose={onClose} />\r\n                {/* <ConnectButton handleOpenModal={onOpen} handleOpenModal2={onOpen} /> */}\r\n                {/* {account \r\n                  ? <AccountModal isOpen={isOpen} onClose={onClose} />\r\n                  : <SelectorModal isOpen={isOpen} onClose={onClose} />\r\n                } */}\r\n              </ChakraProvider>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <ul className=\"signin-up\">\r\n        <li onClick={closeMobileMenu}>\r\n        <ChakraProvider theme={theme}>\r\n          <ConnectButton handleOpenModal={onOpen} />\r\n          <AccountModal isOpen={isOpen} onClose={onClose} />\r\n          {/* <ConnectButton handleOpenModal={onOpen} handleOpenModal2={onOpen} /> */}\r\n          {/* {account \r\n            ? <AccountModal isOpen={isOpen} onClose={onClose} />\r\n            : <SelectorModal isOpen={isOpen} onClose={onClose} />\r\n          } */}\r\n        </ChakraProvider>\r\n        </li>\r\n      </ul>\r\n      <div className=\"mobile-menu\" onClick={handleClick}>\r\n        {click \r\n            ? (<AiOutlineClose className=\"menu-icon\" />) \r\n            : (<AiOutlineMenu className=\"menu-icon\" />)\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\n","import styled from \"styled-components\";\r\nimport { FC } from \"react\";\r\nimport \"../styles/footer.scss\";\r\n\r\nconst FooterDefault = styled.div`\r\n  min-width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(15px);\r\n  color: black;\r\n  position: fixed;\r\n  bottom: 0px;\r\n`;\r\n\r\n// add footer socials\r\n\r\nconst Footer: FC = () => {\r\n  return (\r\n    <>\r\n      <div className=\"footer-footer\">Copyright © 2022 Rekt Apes</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\n//import reportWebVitals from \"./reportWebVitals\";\r\n\r\n//import { ChainId } from \"./modules/usedapp2/constants/chainId\";\r\nimport { DAppProvider } from \"./modules/usedapp2/providers\";\r\n\r\n//import \"./vendor/all.min.css\";\r\nimport \"./vendor/animate.min.css\";\r\nimport \"./vendor/bootstrap.min.css\";\r\n//import \"./vendor/icons.min.css\";\r\nimport \"./vendor/slider.min.css\";\r\n\r\n\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\n\r\n/*\r\n * ChainIds:\r\n *  BSC:         56\r\n *  URL:         https://dataseed1.binance.org/\r\n *  BSC Testnet: 97\r\n *  URL:         https://testnet.bscscan.com\r\n *  FTM:         250\r\n *  URL:         https://ftmscan.com/\r\n *  FTM Testnet: 0xfa2 === 4002\r\n *  URL:         https://rpc.testnet.fantom.network/\r\n *\r\n *  Need to deploy multicall contract on BSC Testnet and FTM Mainnet\r\n */\r\n\r\n//const config = {\r\n//  readOnlyChainId: 56\r\n//readOnlyUrls: {\r\n//  [ChainId.FTM_Testnet]: \"https://rpc.testnet.fantom.network/\"\r\n//}\r\n//};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DAppProvider config={{}}>\r\n      <Header />\r\n      <App />\r\n      <Footer />\r\n    </DAppProvider>\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n); \r\n\r\nexport * from \"./modules/usedapp2/constants\";\r\nexport * from \"./modules/usedapp2/providers\";\r\nexport * from \"./modules/usedapp2/hooks\";\r\nexport * from \"./modules/usedapp2/model\";\r\nexport * from \"./modules/usedapp2/helpers\";\r\n"],"sourceRoot":""}